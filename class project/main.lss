
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000096  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000057  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a0  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000078  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  
  DDRB=DDRB | 0b11111111; 
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
  DDRA=DDRA & 0b11111110; 
  72:	d0 98       	cbi	0x1a, 0	; 26
 // PORTB = 0b00000001;
  
  while(1){
 
  char button1_status = PINA & 0b00000001; 
  74:	89 b3       	in	r24, 0x19	; 25
 
  PORTB=PORTB | 0b00000001;
  76:	c0 9a       	sbi	0x18, 0	; 24
  PORTB=PORTB & 0b01111111;
  78:	c7 98       	cbi	0x18, 7	; 24
  
  if(button1_status){
  7a:	80 ff       	sbrs	r24, 0
  7c:	06 c0       	rjmp	.+12     	; 0x8a <main+0x1e>
	PORTB=PORTB | 0b01010100; 
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	84 65       	ori	r24, 0x54	; 84
  82:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & 0b11010101;
  84:	88 b3       	in	r24, 0x18	; 24
  86:	85 7d       	andi	r24, 0xD5	; 213
  88:	05 c0       	rjmp	.+10     	; 0x94 <main+0x28>


  }else{

	PORTB=PORTB | 0b00101010; 
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8a 62       	ori	r24, 0x2A	; 42
  8e:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & 0b10101011;
  90:	88 b3       	in	r24, 0x18	; 24
  92:	8b 7a       	andi	r24, 0xAB	; 171
  94:	88 bb       	out	0x18, r24	; 24
  96:	ee cf       	rjmp	.-36     	; 0x74 <main+0x8>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
