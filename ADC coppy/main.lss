
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000066c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000402  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f5  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003cd  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000107  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000248  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<ADC.h>
#include<seven_segment.h>


void  main(){
	DDRC = 0b11111111;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	
	
	while(1){
		int sensor_reading = adc_read(0);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 c3 01 	call	0x386	; 0x386 <adc_read>
  8e:	bc 01       	movw	r22, r24
		Seven_segment(&PORTC,sensor_reading);
  90:	85 e3       	ldi	r24, 0x35	; 53
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 4d 00 	call	0x9a	; 0x9a <Seven_segment>
  98:	f6 cf       	rjmp	.-20     	; 0x86 <main+0x4>

0000009a <Seven_segment>:
#include <avr/io.h>
#include <util/delay.h>
int d=1;
void Seven_segment(char *segment,unsigned int number){
  9a:	8f 92       	push	r8
  9c:	9f 92       	push	r9
  9e:	af 92       	push	r10
  a0:	bf 92       	push	r11
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	28 97       	sbiw	r28, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	4c 01       	movw	r8, r24
  c4:	9b 01       	movw	r18, r22

		unsigned int split_number[4]={0,0,0,0};
  c6:	fe 01       	movw	r30, r28
  c8:	31 96       	adiw	r30, 0x01	; 1
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	df 01       	movw	r26, r30
  ce:	1d 92       	st	X+, r1
  d0:	8a 95       	dec	r24
  d2:	e9 f7       	brne	.-6      	; 0xce <Seven_segment+0x34>
  d4:	fe 01       	movw	r30, r28
  d6:	37 96       	adiw	r30, 0x07	; 7
  d8:	0e c0       	rjmp	.+28     	; 0xf6 <Seven_segment+0x5c>
		
		int n=4;
		while(number!=0){
			split_number[n-1]=number%10;
  da:	c9 01       	movw	r24, r18
  dc:	6a e0       	ldi	r22, 0x0A	; 10
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 20 03 	call	0x640	; 0x640 <__udivmodhi4>
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
			number=number/10;
  e8:	c9 01       	movw	r24, r18
  ea:	6a e0       	ldi	r22, 0x0A	; 10
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	0e 94 20 03 	call	0x640	; 0x640 <__udivmodhi4>
  f2:	9b 01       	movw	r18, r22
  f4:	32 97       	sbiw	r30, 0x02	; 2
void Seven_segment(char *segment,unsigned int number){

		unsigned int split_number[4]={0,0,0,0};
		
		int n=4;
		while(number!=0){
  f6:	21 15       	cp	r18, r1
  f8:	31 05       	cpc	r19, r1
  fa:	79 f7       	brne	.-34     	; 0xda <Seven_segment+0x40>
			number=number/10;
			n--;
		}
				
		        *segment=(split_number[4-1]|0b11110000); 
                *segment&=~(1<<4);   
  fc:	8f 81       	ldd	r24, Y+7	; 0x07
  fe:	80 6f       	ori	r24, 0xF0	; 240
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	f4 01       	movw	r30, r8
 104:	80 83       	st	Z, r24
                _delay_ms(d);
 106:	60 91 60 00 	lds	r22, 0x0060
 10a:	70 91 61 00 	lds	r23, 0x0061
 10e:	88 27       	eor	r24, r24
 110:	77 fd       	sbrc	r23, 7
 112:	80 95       	com	r24
 114:	98 2f       	mov	r25, r24
 116:	0e 94 09 02 	call	0x412	; 0x412 <__floatsisf>
 11a:	5b 01       	movw	r10, r22
 11c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	4a ef       	ldi	r20, 0xFA	; 250
 124:	54 e4       	ldi	r21, 0x44	; 68
 126:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 12a:	7b 01       	movw	r14, r22
 12c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	5f e3       	ldi	r21, 0x3F	; 63
 136:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__cmpsf2>
 13a:	88 23       	and	r24, r24
 13c:	1c f4       	brge	.+6      	; 0x144 <Seven_segment+0xaa>
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	24 c0       	rjmp	.+72     	; 0x18c <Seven_segment+0xf2>
		__ticks = 1;
	else if (__tmp > 65535)
 144:	c8 01       	movw	r24, r16
 146:	b7 01       	movw	r22, r14
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	3f ef       	ldi	r19, 0xFF	; 255
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	57 e4       	ldi	r21, 0x47	; 71
 150:	0e 94 91 02 	call	0x522	; 0x522 <__gesf2>
 154:	18 16       	cp	r1, r24
 156:	b4 f4       	brge	.+44     	; 0x184 <Seven_segment+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 158:	c6 01       	movw	r24, r12
 15a:	b5 01       	movw	r22, r10
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e2       	ldi	r20, 0x20	; 32
 162:	51 e4       	ldi	r21, 0x41	; 65
 164:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 168:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	05 c0       	rjmp	.+10     	; 0x17c <Seven_segment+0xe2>
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Seven_segment+0xda>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 178:	61 50       	subi	r22, 0x01	; 1
 17a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	61 15       	cp	r22, r1
 17e:	71 05       	cpc	r23, r1
 180:	c1 f7       	brne	.-16     	; 0x172 <Seven_segment+0xd8>
 182:	07 c0       	rjmp	.+14     	; 0x192 <Seven_segment+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 184:	c8 01       	movw	r24, r16
 186:	b7 01       	movw	r22, r14
 188:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 18c:	cb 01       	movw	r24, r22
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <Seven_segment+0xf4>
		
		        *segment=(split_number[4-2]|0b11110000); 
                *segment&=~(1<<5);   
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	80 6f       	ori	r24, 0xF0	; 240
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	d4 01       	movw	r26, r8
 19a:	8c 93       	st	X, r24
                _delay_ms(d);
 19c:	60 91 60 00 	lds	r22, 0x0060
 1a0:	70 91 61 00 	lds	r23, 0x0061
 1a4:	88 27       	eor	r24, r24
 1a6:	77 fd       	sbrc	r23, 7
 1a8:	80 95       	com	r24
 1aa:	98 2f       	mov	r25, r24
 1ac:	0e 94 09 02 	call	0x412	; 0x412 <__floatsisf>
 1b0:	5b 01       	movw	r10, r22
 1b2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	4a ef       	ldi	r20, 0xFA	; 250
 1ba:	54 e4       	ldi	r21, 0x44	; 68
 1bc:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 1c0:	7b 01       	movw	r14, r22
 1c2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e8       	ldi	r20, 0x80	; 128
 1ca:	5f e3       	ldi	r21, 0x3F	; 63
 1cc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__cmpsf2>
 1d0:	88 23       	and	r24, r24
 1d2:	1c f4       	brge	.+6      	; 0x1da <Seven_segment+0x140>
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	24 c0       	rjmp	.+72     	; 0x222 <Seven_segment+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
 1da:	c8 01       	movw	r24, r16
 1dc:	b7 01       	movw	r22, r14
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	3f ef       	ldi	r19, 0xFF	; 255
 1e2:	4f e7       	ldi	r20, 0x7F	; 127
 1e4:	57 e4       	ldi	r21, 0x47	; 71
 1e6:	0e 94 91 02 	call	0x522	; 0x522 <__gesf2>
 1ea:	18 16       	cp	r1, r24
 1ec:	b4 f4       	brge	.+44     	; 0x21a <Seven_segment+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ee:	c6 01       	movw	r24, r12
 1f0:	b5 01       	movw	r22, r10
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e2       	ldi	r20, 0x20	; 32
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 1fe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 202:	88 ec       	ldi	r24, 0xC8	; 200
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	05 c0       	rjmp	.+10     	; 0x212 <Seven_segment+0x178>
 208:	fc 01       	movw	r30, r24
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <Seven_segment+0x170>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20e:	61 50       	subi	r22, 0x01	; 1
 210:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 212:	61 15       	cp	r22, r1
 214:	71 05       	cpc	r23, r1
 216:	c1 f7       	brne	.-16     	; 0x208 <Seven_segment+0x16e>
 218:	07 c0       	rjmp	.+14     	; 0x228 <Seven_segment+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 21a:	c8 01       	movw	r24, r16
 21c:	b7 01       	movw	r22, r14
 21e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 222:	cb 01       	movw	r24, r22
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <Seven_segment+0x18a>
		
		        *segment=(split_number[4-3]|0b11110000); 
                *segment&=~(1<<6);   
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	80 6f       	ori	r24, 0xF0	; 240
 22c:	8f 7b       	andi	r24, 0xBF	; 191
 22e:	f4 01       	movw	r30, r8
 230:	80 83       	st	Z, r24
                _delay_ms(d);
 232:	60 91 60 00 	lds	r22, 0x0060
 236:	70 91 61 00 	lds	r23, 0x0061
 23a:	88 27       	eor	r24, r24
 23c:	77 fd       	sbrc	r23, 7
 23e:	80 95       	com	r24
 240:	98 2f       	mov	r25, r24
 242:	0e 94 09 02 	call	0x412	; 0x412 <__floatsisf>
 246:	5b 01       	movw	r10, r22
 248:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	4a ef       	ldi	r20, 0xFA	; 250
 250:	54 e4       	ldi	r21, 0x44	; 68
 252:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 256:	7b 01       	movw	r14, r22
 258:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e8       	ldi	r20, 0x80	; 128
 260:	5f e3       	ldi	r21, 0x3F	; 63
 262:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__cmpsf2>
 266:	88 23       	and	r24, r24
 268:	1c f4       	brge	.+6      	; 0x270 <Seven_segment+0x1d6>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	24 c0       	rjmp	.+72     	; 0x2b8 <Seven_segment+0x21e>
		__ticks = 1;
	else if (__tmp > 65535)
 270:	c8 01       	movw	r24, r16
 272:	b7 01       	movw	r22, r14
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	3f ef       	ldi	r19, 0xFF	; 255
 278:	4f e7       	ldi	r20, 0x7F	; 127
 27a:	57 e4       	ldi	r21, 0x47	; 71
 27c:	0e 94 91 02 	call	0x522	; 0x522 <__gesf2>
 280:	18 16       	cp	r1, r24
 282:	b4 f4       	brge	.+44     	; 0x2b0 <Seven_segment+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 284:	c6 01       	movw	r24, r12
 286:	b5 01       	movw	r22, r10
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e2       	ldi	r20, 0x20	; 32
 28e:	51 e4       	ldi	r21, 0x41	; 65
 290:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 294:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 298:	88 ec       	ldi	r24, 0xC8	; 200
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Seven_segment+0x20e>
 29e:	fc 01       	movw	r30, r24
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <Seven_segment+0x206>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a4:	61 50       	subi	r22, 0x01	; 1
 2a6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	c1 f7       	brne	.-16     	; 0x29e <Seven_segment+0x204>
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <Seven_segment+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b0:	c8 01       	movw	r24, r16
 2b2:	b7 01       	movw	r22, r14
 2b4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 2b8:	cb 01       	movw	r24, r22
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <Seven_segment+0x220>
		
		        *segment=(split_number[4-4]|0b11110000); 
                *segment&=~(1<<7);   
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	80 6f       	ori	r24, 0xF0	; 240
 2c2:	8f 77       	andi	r24, 0x7F	; 127
 2c4:	d4 01       	movw	r26, r8
 2c6:	8c 93       	st	X, r24
                _delay_ms(d);
 2c8:	60 91 60 00 	lds	r22, 0x0060
 2cc:	70 91 61 00 	lds	r23, 0x0061
 2d0:	88 27       	eor	r24, r24
 2d2:	77 fd       	sbrc	r23, 7
 2d4:	80 95       	com	r24
 2d6:	98 2f       	mov	r25, r24
 2d8:	0e 94 09 02 	call	0x412	; 0x412 <__floatsisf>
 2dc:	5b 01       	movw	r10, r22
 2de:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	4a ef       	ldi	r20, 0xFA	; 250
 2e6:	54 e4       	ldi	r21, 0x44	; 68
 2e8:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 2ec:	7b 01       	movw	r14, r22
 2ee:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e8       	ldi	r20, 0x80	; 128
 2f6:	5f e3       	ldi	r21, 0x3F	; 63
 2f8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__cmpsf2>
 2fc:	88 23       	and	r24, r24
 2fe:	1c f4       	brge	.+6      	; 0x306 <Seven_segment+0x26c>
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	24 c0       	rjmp	.+72     	; 0x34e <Seven_segment+0x2b4>
		__ticks = 1;
	else if (__tmp > 65535)
 306:	c8 01       	movw	r24, r16
 308:	b7 01       	movw	r22, r14
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	3f ef       	ldi	r19, 0xFF	; 255
 30e:	4f e7       	ldi	r20, 0x7F	; 127
 310:	57 e4       	ldi	r21, 0x47	; 71
 312:	0e 94 91 02 	call	0x522	; 0x522 <__gesf2>
 316:	18 16       	cp	r1, r24
 318:	b4 f4       	brge	.+44     	; 0x346 <Seven_segment+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31a:	c6 01       	movw	r24, r12
 31c:	b5 01       	movw	r22, r10
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e2       	ldi	r20, 0x20	; 32
 324:	51 e4       	ldi	r21, 0x41	; 65
 326:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3>
 32a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 32e:	88 ec       	ldi	r24, 0xC8	; 200
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	05 c0       	rjmp	.+10     	; 0x33e <Seven_segment+0x2a4>
 334:	fc 01       	movw	r30, r24
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <Seven_segment+0x29c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	61 50       	subi	r22, 0x01	; 1
 33c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33e:	61 15       	cp	r22, r1
 340:	71 05       	cpc	r23, r1
 342:	c1 f7       	brne	.-16     	; 0x334 <Seven_segment+0x29a>
 344:	07 c0       	rjmp	.+14     	; 0x354 <Seven_segment+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 346:	c8 01       	movw	r24, r16
 348:	b7 01       	movw	r22, r14
 34a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 34e:	cb 01       	movw	r24, r22
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <Seven_segment+0x2b6>
}
 354:	28 96       	adiw	r28, 0x08	; 8
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	9f 90       	pop	r9
 376:	8f 90       	pop	r8
 378:	08 95       	ret

0000037a <adc_init>:
#include<avr/io.h>
#include<util/delay.h>

void adc_init(){
	ADMUX |= (1<<REFS0);						//Reference Selection
 37a:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADPS1)|(1<<ADPS2)|(1<<ADPS0);						//Division Factor 4>>250 kHz
 37c:	86 b1       	in	r24, 0x06	; 6
 37e:	87 60       	ori	r24, 0x07	; 7
 380:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); 						//Enabling ADC
 382:	37 9a       	sbi	0x06, 7	; 6
}
 384:	08 95       	ret

00000386 <adc_read>:

int adc_read(int chanel){
 386:	1f 93       	push	r17
 388:	18 2f       	mov	r17, r24
	adc_init();
 38a:	0e 94 bd 01 	call	0x37a	; 0x37a <adc_init>
	ADMUX |= chanel;									//Channel selection AC0
 38e:	87 b1       	in	r24, 0x07	; 7
 390:	81 2b       	or	r24, r17
 392:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 394:	36 9a       	sbi	0x06, 6	; 6
    while(ADCSRA&0b01000000){
 396:	36 99       	sbic	0x06, 6	; 6
 398:	fe cf       	rjmp	.-4      	; 0x396 <adc_read+0x10>
	    }						//Start Convertion
	int value = ADCL;							//Store Value 
 39a:	24 b1       	in	r18, 0x04	; 4
 39c:	30 e0       	ldi	r19, 0x00	; 0
	value |= (ADCH<<8);						
 39e:	45 b1       	in	r20, 0x05	; 5
 3a0:	94 2f       	mov	r25, r20
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	28 2b       	or	r18, r24
 3a6:	39 2b       	or	r19, r25
	return(value);
 3a8:	c9 01       	movw	r24, r18
 3aa:	1f 91       	pop	r17
 3ac:	08 95       	ret

000003ae <__cmpsf2>:
 3ae:	6c d0       	rcall	.+216    	; 0x488 <__fp_cmp>
 3b0:	08 f4       	brcc	.+2      	; 0x3b4 <__cmpsf2+0x6>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret

000003b6 <__fixunssfsi>:
 3b6:	94 d0       	rcall	.+296    	; 0x4e0 <__fp_splitA>
 3b8:	88 f0       	brcs	.+34     	; 0x3dc <__fixunssfsi+0x26>
 3ba:	9f 57       	subi	r25, 0x7F	; 127
 3bc:	90 f0       	brcs	.+36     	; 0x3e2 <__fixunssfsi+0x2c>
 3be:	b9 2f       	mov	r27, r25
 3c0:	99 27       	eor	r25, r25
 3c2:	b7 51       	subi	r27, 0x17	; 23
 3c4:	a0 f0       	brcs	.+40     	; 0x3ee <__fixunssfsi+0x38>
 3c6:	d1 f0       	breq	.+52     	; 0x3fc <__fixunssfsi+0x46>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	1a f0       	brmi	.+6      	; 0x3d8 <__fixunssfsi+0x22>
 3d2:	ba 95       	dec	r27
 3d4:	c9 f7       	brne	.-14     	; 0x3c8 <__fixunssfsi+0x12>
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <__fixunssfsi+0x46>
 3d8:	b1 30       	cpi	r27, 0x01	; 1
 3da:	81 f0       	breq	.+32     	; 0x3fc <__fixunssfsi+0x46>
 3dc:	9b d0       	rcall	.+310    	; 0x514 <__fp_zero>
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	08 95       	ret
 3e2:	98 c0       	rjmp	.+304    	; 0x514 <__fp_zero>
 3e4:	67 2f       	mov	r22, r23
 3e6:	78 2f       	mov	r23, r24
 3e8:	88 27       	eor	r24, r24
 3ea:	b8 5f       	subi	r27, 0xF8	; 248
 3ec:	39 f0       	breq	.+14     	; 0x3fc <__fixunssfsi+0x46>
 3ee:	b9 3f       	cpi	r27, 0xF9	; 249
 3f0:	cc f3       	brlt	.-14     	; 0x3e4 <__fixunssfsi+0x2e>
 3f2:	86 95       	lsr	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b3 95       	inc	r27
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__fixunssfsi+0x3c>
 3fc:	3e f4       	brtc	.+14     	; 0x40c <__fixunssfsi+0x56>
 3fe:	90 95       	com	r25
 400:	80 95       	com	r24
 402:	70 95       	com	r23
 404:	61 95       	neg	r22
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8f 4f       	sbci	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	08 95       	ret

0000040e <__floatunsisf>:
 40e:	e8 94       	clt
 410:	09 c0       	rjmp	.+18     	; 0x424 <__floatsisf+0x12>

00000412 <__floatsisf>:
 412:	97 fb       	bst	r25, 7
 414:	3e f4       	brtc	.+14     	; 0x424 <__floatsisf+0x12>
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	99 23       	and	r25, r25
 426:	a9 f0       	breq	.+42     	; 0x452 <__floatsisf+0x40>
 428:	f9 2f       	mov	r31, r25
 42a:	96 e9       	ldi	r25, 0x96	; 150
 42c:	bb 27       	eor	r27, r27
 42e:	93 95       	inc	r25
 430:	f6 95       	lsr	r31
 432:	87 95       	ror	r24
 434:	77 95       	ror	r23
 436:	67 95       	ror	r22
 438:	b7 95       	ror	r27
 43a:	f1 11       	cpse	r31, r1
 43c:	f8 cf       	rjmp	.-16     	; 0x42e <__floatsisf+0x1c>
 43e:	fa f4       	brpl	.+62     	; 0x47e <__floatsisf+0x6c>
 440:	bb 0f       	add	r27, r27
 442:	11 f4       	brne	.+4      	; 0x448 <__floatsisf+0x36>
 444:	60 ff       	sbrs	r22, 0
 446:	1b c0       	rjmp	.+54     	; 0x47e <__floatsisf+0x6c>
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	16 c0       	rjmp	.+44     	; 0x47e <__floatsisf+0x6c>
 452:	88 23       	and	r24, r24
 454:	11 f0       	breq	.+4      	; 0x45a <__floatsisf+0x48>
 456:	96 e9       	ldi	r25, 0x96	; 150
 458:	11 c0       	rjmp	.+34     	; 0x47c <__floatsisf+0x6a>
 45a:	77 23       	and	r23, r23
 45c:	21 f0       	breq	.+8      	; 0x466 <__floatsisf+0x54>
 45e:	9e e8       	ldi	r25, 0x8E	; 142
 460:	87 2f       	mov	r24, r23
 462:	76 2f       	mov	r23, r22
 464:	05 c0       	rjmp	.+10     	; 0x470 <__floatsisf+0x5e>
 466:	66 23       	and	r22, r22
 468:	71 f0       	breq	.+28     	; 0x486 <__floatsisf+0x74>
 46a:	96 e8       	ldi	r25, 0x86	; 134
 46c:	86 2f       	mov	r24, r22
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	2a f0       	brmi	.+10     	; 0x47e <__floatsisf+0x6c>
 474:	9a 95       	dec	r25
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	da f7       	brpl	.-10     	; 0x474 <__floatsisf+0x62>
 47e:	88 0f       	add	r24, r24
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret

00000488 <__fp_cmp>:
 488:	99 0f       	add	r25, r25
 48a:	00 08       	sbc	r0, r0
 48c:	55 0f       	add	r21, r21
 48e:	aa 0b       	sbc	r26, r26
 490:	e0 e8       	ldi	r30, 0x80	; 128
 492:	fe ef       	ldi	r31, 0xFE	; 254
 494:	16 16       	cp	r1, r22
 496:	17 06       	cpc	r1, r23
 498:	e8 07       	cpc	r30, r24
 49a:	f9 07       	cpc	r31, r25
 49c:	c0 f0       	brcs	.+48     	; 0x4ce <__fp_cmp+0x46>
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	e4 07       	cpc	r30, r20
 4a4:	f5 07       	cpc	r31, r21
 4a6:	98 f0       	brcs	.+38     	; 0x4ce <__fp_cmp+0x46>
 4a8:	62 1b       	sub	r22, r18
 4aa:	73 0b       	sbc	r23, r19
 4ac:	84 0b       	sbc	r24, r20
 4ae:	95 0b       	sbc	r25, r21
 4b0:	39 f4       	brne	.+14     	; 0x4c0 <__fp_cmp+0x38>
 4b2:	0a 26       	eor	r0, r26
 4b4:	61 f0       	breq	.+24     	; 0x4ce <__fp_cmp+0x46>
 4b6:	23 2b       	or	r18, r19
 4b8:	24 2b       	or	r18, r20
 4ba:	25 2b       	or	r18, r21
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <__fp_cmp+0x3e>
 4be:	08 95       	ret
 4c0:	0a 26       	eor	r0, r26
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <__fp_cmp+0x3e>
 4c4:	a1 40       	sbci	r26, 0x01	; 1
 4c6:	a6 95       	lsr	r26
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	81 1d       	adc	r24, r1
 4cc:	81 1d       	adc	r24, r1
 4ce:	08 95       	ret

000004d0 <__fp_split3>:
 4d0:	57 fd       	sbrc	r21, 7
 4d2:	90 58       	subi	r25, 0x80	; 128
 4d4:	44 0f       	add	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <__fp_splitA+0x10>
 4da:	5f 3f       	cpi	r21, 0xFF	; 255
 4dc:	71 f0       	breq	.+28     	; 0x4fa <__fp_splitA+0x1a>
 4de:	47 95       	ror	r20

000004e0 <__fp_splitA>:
 4e0:	88 0f       	add	r24, r24
 4e2:	97 fb       	bst	r25, 7
 4e4:	99 1f       	adc	r25, r25
 4e6:	61 f0       	breq	.+24     	; 0x500 <__fp_splitA+0x20>
 4e8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ea:	79 f0       	breq	.+30     	; 0x50a <__fp_splitA+0x2a>
 4ec:	87 95       	ror	r24
 4ee:	08 95       	ret
 4f0:	12 16       	cp	r1, r18
 4f2:	13 06       	cpc	r1, r19
 4f4:	14 06       	cpc	r1, r20
 4f6:	55 1f       	adc	r21, r21
 4f8:	f2 cf       	rjmp	.-28     	; 0x4de <__fp_split3+0xe>
 4fa:	46 95       	lsr	r20
 4fc:	f1 df       	rcall	.-30     	; 0x4e0 <__fp_splitA>
 4fe:	08 c0       	rjmp	.+16     	; 0x510 <__fp_splitA+0x30>
 500:	16 16       	cp	r1, r22
 502:	17 06       	cpc	r1, r23
 504:	18 06       	cpc	r1, r24
 506:	99 1f       	adc	r25, r25
 508:	f1 cf       	rjmp	.-30     	; 0x4ec <__fp_splitA+0xc>
 50a:	86 95       	lsr	r24
 50c:	71 05       	cpc	r23, r1
 50e:	61 05       	cpc	r22, r1
 510:	08 94       	sec
 512:	08 95       	ret

00000514 <__fp_zero>:
 514:	e8 94       	clt

00000516 <__fp_szero>:
 516:	bb 27       	eor	r27, r27
 518:	66 27       	eor	r22, r22
 51a:	77 27       	eor	r23, r23
 51c:	cb 01       	movw	r24, r22
 51e:	97 f9       	bld	r25, 7
 520:	08 95       	ret

00000522 <__gesf2>:
 522:	b2 df       	rcall	.-156    	; 0x488 <__fp_cmp>
 524:	08 f4       	brcc	.+2      	; 0x528 <__gesf2+0x6>
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	08 95       	ret

0000052a <__mulsf3>:
 52a:	0b d0       	rcall	.+22     	; 0x542 <__mulsf3x>
 52c:	78 c0       	rjmp	.+240    	; 0x61e <__fp_round>
 52e:	69 d0       	rcall	.+210    	; 0x602 <__fp_pscA>
 530:	28 f0       	brcs	.+10     	; 0x53c <__mulsf3+0x12>
 532:	6e d0       	rcall	.+220    	; 0x610 <__fp_pscB>
 534:	18 f0       	brcs	.+6      	; 0x53c <__mulsf3+0x12>
 536:	95 23       	and	r25, r21
 538:	09 f0       	breq	.+2      	; 0x53c <__mulsf3+0x12>
 53a:	5a c0       	rjmp	.+180    	; 0x5f0 <__fp_inf>
 53c:	5f c0       	rjmp	.+190    	; 0x5fc <__fp_nan>
 53e:	11 24       	eor	r1, r1
 540:	ea cf       	rjmp	.-44     	; 0x516 <__fp_szero>

00000542 <__mulsf3x>:
 542:	c6 df       	rcall	.-116    	; 0x4d0 <__fp_split3>
 544:	a0 f3       	brcs	.-24     	; 0x52e <__mulsf3+0x4>

00000546 <__mulsf3_pse>:
 546:	95 9f       	mul	r25, r21
 548:	d1 f3       	breq	.-12     	; 0x53e <__mulsf3+0x14>
 54a:	95 0f       	add	r25, r21
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	55 1f       	adc	r21, r21
 550:	62 9f       	mul	r22, r18
 552:	f0 01       	movw	r30, r0
 554:	72 9f       	mul	r23, r18
 556:	bb 27       	eor	r27, r27
 558:	f0 0d       	add	r31, r0
 55a:	b1 1d       	adc	r27, r1
 55c:	63 9f       	mul	r22, r19
 55e:	aa 27       	eor	r26, r26
 560:	f0 0d       	add	r31, r0
 562:	b1 1d       	adc	r27, r1
 564:	aa 1f       	adc	r26, r26
 566:	64 9f       	mul	r22, r20
 568:	66 27       	eor	r22, r22
 56a:	b0 0d       	add	r27, r0
 56c:	a1 1d       	adc	r26, r1
 56e:	66 1f       	adc	r22, r22
 570:	82 9f       	mul	r24, r18
 572:	22 27       	eor	r18, r18
 574:	b0 0d       	add	r27, r0
 576:	a1 1d       	adc	r26, r1
 578:	62 1f       	adc	r22, r18
 57a:	73 9f       	mul	r23, r19
 57c:	b0 0d       	add	r27, r0
 57e:	a1 1d       	adc	r26, r1
 580:	62 1f       	adc	r22, r18
 582:	83 9f       	mul	r24, r19
 584:	a0 0d       	add	r26, r0
 586:	61 1d       	adc	r22, r1
 588:	22 1f       	adc	r18, r18
 58a:	74 9f       	mul	r23, r20
 58c:	33 27       	eor	r19, r19
 58e:	a0 0d       	add	r26, r0
 590:	61 1d       	adc	r22, r1
 592:	23 1f       	adc	r18, r19
 594:	84 9f       	mul	r24, r20
 596:	60 0d       	add	r22, r0
 598:	21 1d       	adc	r18, r1
 59a:	82 2f       	mov	r24, r18
 59c:	76 2f       	mov	r23, r22
 59e:	6a 2f       	mov	r22, r26
 5a0:	11 24       	eor	r1, r1
 5a2:	9f 57       	subi	r25, 0x7F	; 127
 5a4:	50 40       	sbci	r21, 0x00	; 0
 5a6:	8a f0       	brmi	.+34     	; 0x5ca <__mulsf3_pse+0x84>
 5a8:	e1 f0       	breq	.+56     	; 0x5e2 <__mulsf3_pse+0x9c>
 5aa:	88 23       	and	r24, r24
 5ac:	4a f0       	brmi	.+18     	; 0x5c0 <__mulsf3_pse+0x7a>
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	bb 1f       	adc	r27, r27
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	91 50       	subi	r25, 0x01	; 1
 5bc:	50 40       	sbci	r21, 0x00	; 0
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__mulsf3_pse+0x64>
 5c0:	9e 3f       	cpi	r25, 0xFE	; 254
 5c2:	51 05       	cpc	r21, r1
 5c4:	70 f0       	brcs	.+28     	; 0x5e2 <__mulsf3_pse+0x9c>
 5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <__fp_inf>
 5c8:	a6 cf       	rjmp	.-180    	; 0x516 <__fp_szero>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	ec f3       	brlt	.-6      	; 0x5c8 <__mulsf3_pse+0x82>
 5ce:	98 3e       	cpi	r25, 0xE8	; 232
 5d0:	dc f3       	brlt	.-10     	; 0x5c8 <__mulsf3_pse+0x82>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b7 95       	ror	r27
 5da:	f7 95       	ror	r31
 5dc:	e7 95       	ror	r30
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	c1 f7       	brne	.-16     	; 0x5d2 <__mulsf3_pse+0x8c>
 5e2:	fe 2b       	or	r31, r30
 5e4:	88 0f       	add	r24, r24
 5e6:	91 1d       	adc	r25, r1
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret

000005f0 <__fp_inf>:
 5f0:	97 f9       	bld	r25, 7
 5f2:	9f 67       	ori	r25, 0x7F	; 127
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	08 95       	ret

000005fc <__fp_nan>:
 5fc:	9f ef       	ldi	r25, 0xFF	; 255
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	08 95       	ret

00000602 <__fp_pscA>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	18 06       	cpc	r1, r24
 60c:	09 06       	cpc	r0, r25
 60e:	08 95       	ret

00000610 <__fp_pscB>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	05 06       	cpc	r0, r21
 61c:	08 95       	ret

0000061e <__fp_round>:
 61e:	09 2e       	mov	r0, r25
 620:	03 94       	inc	r0
 622:	00 0c       	add	r0, r0
 624:	11 f4       	brne	.+4      	; 0x62a <__fp_round+0xc>
 626:	88 23       	and	r24, r24
 628:	52 f0       	brmi	.+20     	; 0x63e <__fp_round+0x20>
 62a:	bb 0f       	add	r27, r27
 62c:	40 f4       	brcc	.+16     	; 0x63e <__fp_round+0x20>
 62e:	bf 2b       	or	r27, r31
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0x18>
 632:	60 ff       	sbrs	r22, 0
 634:	04 c0       	rjmp	.+8      	; 0x63e <__fp_round+0x20>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	08 95       	ret

00000640 <__udivmodhi4>:
 640:	aa 1b       	sub	r26, r26
 642:	bb 1b       	sub	r27, r27
 644:	51 e1       	ldi	r21, 0x11	; 17
 646:	07 c0       	rjmp	.+14     	; 0x656 <__udivmodhi4_ep>

00000648 <__udivmodhi4_loop>:
 648:	aa 1f       	adc	r26, r26
 64a:	bb 1f       	adc	r27, r27
 64c:	a6 17       	cp	r26, r22
 64e:	b7 07       	cpc	r27, r23
 650:	10 f0       	brcs	.+4      	; 0x656 <__udivmodhi4_ep>
 652:	a6 1b       	sub	r26, r22
 654:	b7 0b       	sbc	r27, r23

00000656 <__udivmodhi4_ep>:
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	5a 95       	dec	r21
 65c:	a9 f7       	brne	.-22     	; 0x648 <__udivmodhi4_loop>
 65e:	80 95       	com	r24
 660:	90 95       	com	r25
 662:	bc 01       	movw	r22, r24
 664:	cd 01       	movw	r24, r26
 666:	08 95       	ret

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
