
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f9  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010c  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ee  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cd  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  82:	8f 92       	push	r8
  84:	9f 92       	push	r9
  86:	af 92       	push	r10
  88:	bf 92       	push	r11
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	64 97       	sbiw	r28, 0x14	; 20
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61

	DDRA=0b11111111;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11111111;
  ae:	87 bb       	out	0x17, r24	; 23
	
	while(1){
	
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
  b0:	7e 01       	movw	r14, r28
  b2:	08 94       	sec
  b4:	e1 1c       	adc	r14, r1
  b6:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	00 e6       	ldi	r16, 0x60	; 96
  ba:	1a ee       	ldi	r17, 0xEA	; 234
		
		for(int i=0;i<45;i++){
			first_segment=i/10;
			second_segment=i%10;
			
			PORTB=0b00001111;
  bc:	4f e0       	ldi	r20, 0x0F	; 15
			PORTA=0x5b;
  be:	eb e5       	ldi	r30, 0x5B	; 91
  c0:	8e 2e       	mov	r8, r30
			PORTB=0b00000111;
  c2:	77 e0       	ldi	r23, 0x07	; 7
  c4:	97 2e       	mov	r9, r23
			_delay_ms(30);
			
			PORTB=0b00001111;
			PORTA=0x3f;
  c6:	6f e3       	ldi	r22, 0x3F	; 63
  c8:	a6 2e       	mov	r10, r22
			PORTB=0b00001011;
  ca:	5b e0       	ldi	r21, 0x0B	; 11
  cc:	b5 2e       	mov	r11, r21
			_delay_ms(30);
			
			PORTB=0b00001111;
			PORTA=value[first_segment];
			PORTB=0b00001101;
  ce:	3d e0       	ldi	r19, 0x0D	; 13
  d0:	c3 2e       	mov	r12, r19
			_delay_ms(30);
			
			
			PORTB=0b00001111;
			PORTA=value[second_segment];
			PORTB=0b00001110;
  d2:	2e e0       	ldi	r18, 0x0E	; 14
  d4:	d2 2e       	mov	r13, r18
	DDRA=0b11111111;
	DDRB=0b11111111;
	
	while(1){
	
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
  d6:	d7 01       	movw	r26, r14
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	84 e1       	ldi	r24, 0x14	; 20
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5c>
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
		
		for(int i=0;i<45;i++){
			first_segment=i/10;
			second_segment=i%10;
			
			PORTB=0b00001111;
  ea:	48 bb       	out	0x18, r20	; 24
			PORTA=0x5b;
  ec:	8b ba       	out	0x1b, r8	; 27
			PORTB=0b00000111;
  ee:	98 ba       	out	0x18, r9	; 24
  f0:	c8 01       	movw	r24, r16
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x70>
			_delay_ms(30);
			
			PORTB=0b00001111;
  f6:	48 bb       	out	0x18, r20	; 24
			PORTA=0x3f;
  f8:	ab ba       	out	0x1b, r10	; 27
			PORTB=0b00001011;
  fa:	b8 ba       	out	0x18, r11	; 24
  fc:	c8 01       	movw	r24, r16
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x7c>
			_delay_ms(30);
			
			PORTB=0b00001111;
 102:	48 bb       	out	0x18, r20	; 24
			PORTA=value[first_segment];
 104:	c9 01       	movw	r24, r18
 106:	6a e0       	ldi	r22, 0x0A	; 10
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 a9 00 	call	0x152	; 0x152 <__divmodhi4>
 10e:	fb 01       	movw	r30, r22
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0d       	add	r30, r14
 116:	ff 1d       	adc	r31, r15
 118:	80 81       	ld	r24, Z
 11a:	8b bb       	out	0x1b, r24	; 27
			PORTB=0b00001101;
 11c:	c8 ba       	out	0x18, r12	; 24
 11e:	c8 01       	movw	r24, r16
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x9e>
			_delay_ms(30);
			
			
			PORTB=0b00001111;
 124:	48 bb       	out	0x18, r20	; 24
			PORTA=value[second_segment];
 126:	c9 01       	movw	r24, r18
 128:	6a e0       	ldi	r22, 0x0A	; 10
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 a9 00 	call	0x152	; 0x152 <__divmodhi4>
 130:	fc 01       	movw	r30, r24
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ee 0d       	add	r30, r14
 138:	ff 1d       	adc	r31, r15
 13a:	80 81       	ld	r24, Z
 13c:	8b bb       	out	0x1b, r24	; 27
			PORTB=0b00001110;
 13e:	d8 ba       	out	0x18, r13	; 24
 140:	c8 01       	movw	r24, r16
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xc0>
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
	 int first_segment=0,second_segment=0;
			
		
		
		for(int i=0;i<45;i++){
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	2d 32       	cpi	r18, 0x2D	; 45
 14c:	31 05       	cpc	r19, r1
 14e:	69 f6       	brne	.-102    	; 0xea <main+0x68>
 150:	c2 cf       	rjmp	.-124    	; 0xd6 <main+0x54>

00000152 <__divmodhi4>:
 152:	97 fb       	bst	r25, 7
 154:	09 2e       	mov	r0, r25
 156:	07 26       	eor	r0, r23
 158:	0a d0       	rcall	.+20     	; 0x16e <__divmodhi4_neg1>
 15a:	77 fd       	sbrc	r23, 7
 15c:	04 d0       	rcall	.+8      	; 0x166 <__divmodhi4_neg2>
 15e:	0c d0       	rcall	.+24     	; 0x178 <__udivmodhi4>
 160:	06 d0       	rcall	.+12     	; 0x16e <__divmodhi4_neg1>
 162:	00 20       	and	r0, r0
 164:	1a f4       	brpl	.+6      	; 0x16c <__divmodhi4_exit>

00000166 <__divmodhi4_neg2>:
 166:	70 95       	com	r23
 168:	61 95       	neg	r22
 16a:	7f 4f       	sbci	r23, 0xFF	; 255

0000016c <__divmodhi4_exit>:
 16c:	08 95       	ret

0000016e <__divmodhi4_neg1>:
 16e:	f6 f7       	brtc	.-4      	; 0x16c <__divmodhi4_exit>
 170:	90 95       	com	r25
 172:	81 95       	neg	r24
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	08 95       	ret

00000178 <__udivmodhi4>:
 178:	aa 1b       	sub	r26, r26
 17a:	bb 1b       	sub	r27, r27
 17c:	51 e1       	ldi	r21, 0x11	; 17
 17e:	07 c0       	rjmp	.+14     	; 0x18e <__udivmodhi4_ep>

00000180 <__udivmodhi4_loop>:
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	a6 17       	cp	r26, r22
 186:	b7 07       	cpc	r27, r23
 188:	10 f0       	brcs	.+4      	; 0x18e <__udivmodhi4_ep>
 18a:	a6 1b       	sub	r26, r22
 18c:	b7 0b       	sbc	r27, r23

0000018e <__udivmodhi4_ep>:
 18e:	88 1f       	adc	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	5a 95       	dec	r21
 194:	a9 f7       	brne	.-22     	; 0x180 <__udivmodhi4_loop>
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
