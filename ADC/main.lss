
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000668  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000051  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003eb  00000000  00000000  0000076f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a3  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034c  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000df  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000263  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include<seven_segment.h>
#include <util/delay.h>


void main(){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29

			DDRC=0b11111111;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d0 e0       	ldi	r29, 0x00	; 0
			
			while(1){
			
				for(int i=0;i<=100;i++){
				Seven_segment(&PORTC,i);
  8e:	85 e3       	ldi	r24, 0x35	; 53
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	be 01       	movw	r22, r28
  94:	0e 94 65 00 	call	0xca	; 0xca <Seven_segment>

			DDRC=0b11111111;
			
			while(1){
			
				for(int i=0;i<=100;i++){
  98:	21 96       	adiw	r28, 0x01	; 1
  9a:	c5 36       	cpi	r28, 0x65	; 101
  9c:	d1 05       	cpc	r29, r1
  9e:	ac f7       	brge	.-22     	; 0x8a <main+0x8>
  a0:	f6 cf       	rjmp	.-20     	; 0x8e <main+0xc>

000000a2 <display>:
#include <avr/io.h>
#include <util/delay.h>
int d=5;

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
  a2:	dc 01       	movw	r26, r24
  a4:	fa 01       	movw	r30, r20
	
	*segment = 0b11111111;
	*port= data;
  a6:	20 83       	st	Z, r18
	*segment = ~(1<<(seg-1));
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	61 50       	subi	r22, 0x01	; 1
  ac:	70 40       	sbci	r23, 0x00	; 0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <display+0x16>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <display+0x12>
  bc:	80 95       	com	r24
  be:	8c 93       	st	X, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	97 e2       	ldi	r25, 0x27	; 39
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <display+0x22>
	_delay_ms(5);
}
  c8:	08 95       	ret

000000ca <Seven_segment>:


void Seven_segment(char *segment,unsigned int number){
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	28 97       	sbiw	r28, 0x08	; 8
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	4c 01       	movw	r8, r24
  f4:	9b 01       	movw	r18, r22

		unsigned int split_number[4]={0,0,0,0};
  f6:	fe 01       	movw	r30, r28
  f8:	31 96       	adiw	r30, 0x01	; 1
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	df 01       	movw	r26, r30
  fe:	1d 92       	st	X+, r1
 100:	8a 95       	dec	r24
 102:	e9 f7       	brne	.-6      	; 0xfe <Seven_segment+0x34>
 104:	fe 01       	movw	r30, r28
 106:	37 96       	adiw	r30, 0x07	; 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <Seven_segment+0x5c>
		
		int n=4;
		while(number!=0){
			split_number[n-1]=number%10;
 10a:	c9 01       	movw	r24, r18
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 1e 03 	call	0x63c	; 0x63c <__udivmodhi4>
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
			number=number/10;
 118:	c9 01       	movw	r24, r18
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 1e 03 	call	0x63c	; 0x63c <__udivmodhi4>
 122:	9b 01       	movw	r18, r22
 124:	32 97       	sbiw	r30, 0x02	; 2
void Seven_segment(char *segment,unsigned int number){

		unsigned int split_number[4]={0,0,0,0};
		
		int n=4;
		while(number!=0){
 126:	21 15       	cp	r18, r1
 128:	31 05       	cpc	r19, r1
 12a:	79 f7       	brne	.-34     	; 0x10a <Seven_segment+0x40>
			number=number/10;
			n--;
		}
				
				*segment=(split_number[4-1]|0b11110000); 
                *segment&=~(1<<4);   
 12c:	8f 81       	ldd	r24, Y+7	; 0x07
 12e:	80 6f       	ori	r24, 0xF0	; 240
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	f4 01       	movw	r30, r8
 134:	80 83       	st	Z, r24
                _delay_ms(d);
 136:	60 91 60 00 	lds	r22, 0x0060
 13a:	70 91 61 00 	lds	r23, 0x0061
 13e:	88 27       	eor	r24, r24
 140:	77 fd       	sbrc	r23, 7
 142:	80 95       	com	r24
 144:	98 2f       	mov	r25, r24
 146:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 14a:	5b 01       	movw	r10, r22
 14c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	4a ef       	ldi	r20, 0xFA	; 250
 154:	54 e4       	ldi	r21, 0x44	; 68
 156:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 15a:	7b 01       	movw	r14, r22
 15c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	1c f4       	brge	.+6      	; 0x174 <Seven_segment+0xaa>
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	24 c0       	rjmp	.+72     	; 0x1bc <Seven_segment+0xf2>
		__ticks = 1;
	else if (__tmp > 65535)
 174:	c8 01       	movw	r24, r16
 176:	b7 01       	movw	r22, r14
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	3f ef       	ldi	r19, 0xFF	; 255
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	57 e4       	ldi	r21, 0x47	; 71
 180:	0e 94 8f 02 	call	0x51e	; 0x51e <__gesf2>
 184:	18 16       	cp	r1, r24
 186:	b4 f4       	brge	.+44     	; 0x1b4 <Seven_segment+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	c6 01       	movw	r24, r12
 18a:	b5 01       	movw	r22, r10
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e2       	ldi	r20, 0x20	; 32
 192:	51 e4       	ldi	r21, 0x41	; 65
 194:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 198:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 19c:	88 ec       	ldi	r24, 0xC8	; 200
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <Seven_segment+0xe2>
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <Seven_segment+0xda>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a8:	61 50       	subi	r22, 0x01	; 1
 1aa:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	61 15       	cp	r22, r1
 1ae:	71 05       	cpc	r23, r1
 1b0:	c1 f7       	brne	.-16     	; 0x1a2 <Seven_segment+0xd8>
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <Seven_segment+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b4:	c8 01       	movw	r24, r16
 1b6:	b7 01       	movw	r22, r14
 1b8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 1bc:	cb 01       	movw	r24, r22
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <Seven_segment+0xf4>
		
		        *segment=(split_number[4-2]|0b11110000); 
                *segment&=~(1<<5);   
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	80 6f       	ori	r24, 0xF0	; 240
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	d4 01       	movw	r26, r8
 1ca:	8c 93       	st	X, r24
                _delay_ms(d);
 1cc:	60 91 60 00 	lds	r22, 0x0060
 1d0:	70 91 61 00 	lds	r23, 0x0061
 1d4:	88 27       	eor	r24, r24
 1d6:	77 fd       	sbrc	r23, 7
 1d8:	80 95       	com	r24
 1da:	98 2f       	mov	r25, r24
 1dc:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 1e0:	5b 01       	movw	r10, r22
 1e2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4a ef       	ldi	r20, 0xFA	; 250
 1ea:	54 e4       	ldi	r21, 0x44	; 68
 1ec:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 1f0:	7b 01       	movw	r14, r22
 1f2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e8       	ldi	r20, 0x80	; 128
 1fa:	5f e3       	ldi	r21, 0x3F	; 63
 1fc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__cmpsf2>
 200:	88 23       	and	r24, r24
 202:	1c f4       	brge	.+6      	; 0x20a <Seven_segment+0x140>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	24 c0       	rjmp	.+72     	; 0x252 <Seven_segment+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
 20a:	c8 01       	movw	r24, r16
 20c:	b7 01       	movw	r22, r14
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	3f ef       	ldi	r19, 0xFF	; 255
 212:	4f e7       	ldi	r20, 0x7F	; 127
 214:	57 e4       	ldi	r21, 0x47	; 71
 216:	0e 94 8f 02 	call	0x51e	; 0x51e <__gesf2>
 21a:	18 16       	cp	r1, r24
 21c:	b4 f4       	brge	.+44     	; 0x24a <Seven_segment+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 21e:	c6 01       	movw	r24, r12
 220:	b5 01       	movw	r22, r10
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e2       	ldi	r20, 0x20	; 32
 228:	51 e4       	ldi	r21, 0x41	; 65
 22a:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 22e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 232:	88 ec       	ldi	r24, 0xC8	; 200
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	05 c0       	rjmp	.+10     	; 0x242 <Seven_segment+0x178>
 238:	fc 01       	movw	r30, r24
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <Seven_segment+0x170>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	61 50       	subi	r22, 0x01	; 1
 240:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	61 15       	cp	r22, r1
 244:	71 05       	cpc	r23, r1
 246:	c1 f7       	brne	.-16     	; 0x238 <Seven_segment+0x16e>
 248:	07 c0       	rjmp	.+14     	; 0x258 <Seven_segment+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24a:	c8 01       	movw	r24, r16
 24c:	b7 01       	movw	r22, r14
 24e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 252:	cb 01       	movw	r24, r22
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Seven_segment+0x18a>
		
		        *segment=(split_number[4-3]|0b11110000); 
                *segment&=~(1<<6);   
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	80 6f       	ori	r24, 0xF0	; 240
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	f4 01       	movw	r30, r8
 260:	80 83       	st	Z, r24
                _delay_ms(d);
 262:	60 91 60 00 	lds	r22, 0x0060
 266:	70 91 61 00 	lds	r23, 0x0061
 26a:	88 27       	eor	r24, r24
 26c:	77 fd       	sbrc	r23, 7
 26e:	80 95       	com	r24
 270:	98 2f       	mov	r25, r24
 272:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 276:	5b 01       	movw	r10, r22
 278:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	4a ef       	ldi	r20, 0xFA	; 250
 280:	54 e4       	ldi	r21, 0x44	; 68
 282:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 286:	7b 01       	movw	r14, r22
 288:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e8       	ldi	r20, 0x80	; 128
 290:	5f e3       	ldi	r21, 0x3F	; 63
 292:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__cmpsf2>
 296:	88 23       	and	r24, r24
 298:	1c f4       	brge	.+6      	; 0x2a0 <Seven_segment+0x1d6>
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	24 c0       	rjmp	.+72     	; 0x2e8 <Seven_segment+0x21e>
		__ticks = 1;
	else if (__tmp > 65535)
 2a0:	c8 01       	movw	r24, r16
 2a2:	b7 01       	movw	r22, r14
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	3f ef       	ldi	r19, 0xFF	; 255
 2a8:	4f e7       	ldi	r20, 0x7F	; 127
 2aa:	57 e4       	ldi	r21, 0x47	; 71
 2ac:	0e 94 8f 02 	call	0x51e	; 0x51e <__gesf2>
 2b0:	18 16       	cp	r1, r24
 2b2:	b4 f4       	brge	.+44     	; 0x2e0 <Seven_segment+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b4:	c6 01       	movw	r24, r12
 2b6:	b5 01       	movw	r22, r10
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e2       	ldi	r20, 0x20	; 32
 2be:	51 e4       	ldi	r21, 0x41	; 65
 2c0:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 2c4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 2c8:	88 ec       	ldi	r24, 0xC8	; 200
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <Seven_segment+0x20e>
 2ce:	fc 01       	movw	r30, r24
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <Seven_segment+0x206>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	61 50       	subi	r22, 0x01	; 1
 2d6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d8:	61 15       	cp	r22, r1
 2da:	71 05       	cpc	r23, r1
 2dc:	c1 f7       	brne	.-16     	; 0x2ce <Seven_segment+0x204>
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <Seven_segment+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e0:	c8 01       	movw	r24, r16
 2e2:	b7 01       	movw	r22, r14
 2e4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 2e8:	cb 01       	movw	r24, r22
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <Seven_segment+0x220>
		
		        *segment=(split_number[4-4]|0b11110000); 
                *segment&=~(1<<7);   
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	80 6f       	ori	r24, 0xF0	; 240
 2f2:	8f 77       	andi	r24, 0x7F	; 127
 2f4:	d4 01       	movw	r26, r8
 2f6:	8c 93       	st	X, r24
                _delay_ms(d);
 2f8:	60 91 60 00 	lds	r22, 0x0060
 2fc:	70 91 61 00 	lds	r23, 0x0061
 300:	88 27       	eor	r24, r24
 302:	77 fd       	sbrc	r23, 7
 304:	80 95       	com	r24
 306:	98 2f       	mov	r25, r24
 308:	0e 94 07 02 	call	0x40e	; 0x40e <__floatsisf>
 30c:	5b 01       	movw	r10, r22
 30e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	4a ef       	ldi	r20, 0xFA	; 250
 316:	54 e4       	ldi	r21, 0x44	; 68
 318:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 31c:	7b 01       	movw	r14, r22
 31e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	5f e3       	ldi	r21, 0x3F	; 63
 328:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__cmpsf2>
 32c:	88 23       	and	r24, r24
 32e:	1c f4       	brge	.+6      	; 0x336 <Seven_segment+0x26c>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	24 c0       	rjmp	.+72     	; 0x37e <Seven_segment+0x2b4>
		__ticks = 1;
	else if (__tmp > 65535)
 336:	c8 01       	movw	r24, r16
 338:	b7 01       	movw	r22, r14
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	3f ef       	ldi	r19, 0xFF	; 255
 33e:	4f e7       	ldi	r20, 0x7F	; 127
 340:	57 e4       	ldi	r21, 0x47	; 71
 342:	0e 94 8f 02 	call	0x51e	; 0x51e <__gesf2>
 346:	18 16       	cp	r1, r24
 348:	b4 f4       	brge	.+44     	; 0x376 <Seven_segment+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 34a:	c6 01       	movw	r24, r12
 34c:	b5 01       	movw	r22, r10
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e2       	ldi	r20, 0x20	; 32
 354:	51 e4       	ldi	r21, 0x41	; 65
 356:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
 35a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 35e:	88 ec       	ldi	r24, 0xC8	; 200
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	05 c0       	rjmp	.+10     	; 0x36e <Seven_segment+0x2a4>
 364:	fc 01       	movw	r30, r24
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <Seven_segment+0x29c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	61 50       	subi	r22, 0x01	; 1
 36c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36e:	61 15       	cp	r22, r1
 370:	71 05       	cpc	r23, r1
 372:	c1 f7       	brne	.-16     	; 0x364 <Seven_segment+0x29a>
 374:	07 c0       	rjmp	.+14     	; 0x384 <Seven_segment+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 376:	c8 01       	movw	r24, r16
 378:	b7 01       	movw	r22, r14
 37a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 37e:	cb 01       	movw	r24, r22
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <Seven_segment+0x2b6>
		        PORTA=(split_number[4-4]|0b11110000); 
                PORTA&=~(1<<7);   
                _delay_ms(d);*/
		

}
 384:	28 96       	adiw	r28, 0x08	; 8
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	bf 90       	pop	r11
 3a2:	af 90       	pop	r10
 3a4:	9f 90       	pop	r9
 3a6:	8f 90       	pop	r8
 3a8:	08 95       	ret

000003aa <__cmpsf2>:
 3aa:	6c d0       	rcall	.+216    	; 0x484 <__fp_cmp>
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <__cmpsf2+0x6>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	08 95       	ret

000003b2 <__fixunssfsi>:
 3b2:	94 d0       	rcall	.+296    	; 0x4dc <__fp_splitA>
 3b4:	88 f0       	brcs	.+34     	; 0x3d8 <__fixunssfsi+0x26>
 3b6:	9f 57       	subi	r25, 0x7F	; 127
 3b8:	90 f0       	brcs	.+36     	; 0x3de <__fixunssfsi+0x2c>
 3ba:	b9 2f       	mov	r27, r25
 3bc:	99 27       	eor	r25, r25
 3be:	b7 51       	subi	r27, 0x17	; 23
 3c0:	a0 f0       	brcs	.+40     	; 0x3ea <__fixunssfsi+0x38>
 3c2:	d1 f0       	breq	.+52     	; 0x3f8 <__fixunssfsi+0x46>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	1a f0       	brmi	.+6      	; 0x3d4 <__fixunssfsi+0x22>
 3ce:	ba 95       	dec	r27
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <__fixunssfsi+0x12>
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <__fixunssfsi+0x46>
 3d4:	b1 30       	cpi	r27, 0x01	; 1
 3d6:	81 f0       	breq	.+32     	; 0x3f8 <__fixunssfsi+0x46>
 3d8:	9b d0       	rcall	.+310    	; 0x510 <__fp_zero>
 3da:	b1 e0       	ldi	r27, 0x01	; 1
 3dc:	08 95       	ret
 3de:	98 c0       	rjmp	.+304    	; 0x510 <__fp_zero>
 3e0:	67 2f       	mov	r22, r23
 3e2:	78 2f       	mov	r23, r24
 3e4:	88 27       	eor	r24, r24
 3e6:	b8 5f       	subi	r27, 0xF8	; 248
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <__fixunssfsi+0x46>
 3ea:	b9 3f       	cpi	r27, 0xF9	; 249
 3ec:	cc f3       	brlt	.-14     	; 0x3e0 <__fixunssfsi+0x2e>
 3ee:	86 95       	lsr	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b3 95       	inc	r27
 3f6:	d9 f7       	brne	.-10     	; 0x3ee <__fixunssfsi+0x3c>
 3f8:	3e f4       	brtc	.+14     	; 0x408 <__fixunssfsi+0x56>
 3fa:	90 95       	com	r25
 3fc:	80 95       	com	r24
 3fe:	70 95       	com	r23
 400:	61 95       	neg	r22
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	08 95       	ret

0000040a <__floatunsisf>:
 40a:	e8 94       	clt
 40c:	09 c0       	rjmp	.+18     	; 0x420 <__floatsisf+0x12>

0000040e <__floatsisf>:
 40e:	97 fb       	bst	r25, 7
 410:	3e f4       	brtc	.+14     	; 0x420 <__floatsisf+0x12>
 412:	90 95       	com	r25
 414:	80 95       	com	r24
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	99 23       	and	r25, r25
 422:	a9 f0       	breq	.+42     	; 0x44e <__floatsisf+0x40>
 424:	f9 2f       	mov	r31, r25
 426:	96 e9       	ldi	r25, 0x96	; 150
 428:	bb 27       	eor	r27, r27
 42a:	93 95       	inc	r25
 42c:	f6 95       	lsr	r31
 42e:	87 95       	ror	r24
 430:	77 95       	ror	r23
 432:	67 95       	ror	r22
 434:	b7 95       	ror	r27
 436:	f1 11       	cpse	r31, r1
 438:	f8 cf       	rjmp	.-16     	; 0x42a <__floatsisf+0x1c>
 43a:	fa f4       	brpl	.+62     	; 0x47a <__floatsisf+0x6c>
 43c:	bb 0f       	add	r27, r27
 43e:	11 f4       	brne	.+4      	; 0x444 <__floatsisf+0x36>
 440:	60 ff       	sbrs	r22, 0
 442:	1b c0       	rjmp	.+54     	; 0x47a <__floatsisf+0x6c>
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__floatsisf+0x6c>
 44e:	88 23       	and	r24, r24
 450:	11 f0       	breq	.+4      	; 0x456 <__floatsisf+0x48>
 452:	96 e9       	ldi	r25, 0x96	; 150
 454:	11 c0       	rjmp	.+34     	; 0x478 <__floatsisf+0x6a>
 456:	77 23       	and	r23, r23
 458:	21 f0       	breq	.+8      	; 0x462 <__floatsisf+0x54>
 45a:	9e e8       	ldi	r25, 0x8E	; 142
 45c:	87 2f       	mov	r24, r23
 45e:	76 2f       	mov	r23, r22
 460:	05 c0       	rjmp	.+10     	; 0x46c <__floatsisf+0x5e>
 462:	66 23       	and	r22, r22
 464:	71 f0       	breq	.+28     	; 0x482 <__floatsisf+0x74>
 466:	96 e8       	ldi	r25, 0x86	; 134
 468:	86 2f       	mov	r24, r22
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	2a f0       	brmi	.+10     	; 0x47a <__floatsisf+0x6c>
 470:	9a 95       	dec	r25
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	da f7       	brpl	.-10     	; 0x470 <__floatsisf+0x62>
 47a:	88 0f       	add	r24, r24
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	97 f9       	bld	r25, 7
 482:	08 95       	ret

00000484 <__fp_cmp>:
 484:	99 0f       	add	r25, r25
 486:	00 08       	sbc	r0, r0
 488:	55 0f       	add	r21, r21
 48a:	aa 0b       	sbc	r26, r26
 48c:	e0 e8       	ldi	r30, 0x80	; 128
 48e:	fe ef       	ldi	r31, 0xFE	; 254
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	e8 07       	cpc	r30, r24
 496:	f9 07       	cpc	r31, r25
 498:	c0 f0       	brcs	.+48     	; 0x4ca <__fp_cmp+0x46>
 49a:	12 16       	cp	r1, r18
 49c:	13 06       	cpc	r1, r19
 49e:	e4 07       	cpc	r30, r20
 4a0:	f5 07       	cpc	r31, r21
 4a2:	98 f0       	brcs	.+38     	; 0x4ca <__fp_cmp+0x46>
 4a4:	62 1b       	sub	r22, r18
 4a6:	73 0b       	sbc	r23, r19
 4a8:	84 0b       	sbc	r24, r20
 4aa:	95 0b       	sbc	r25, r21
 4ac:	39 f4       	brne	.+14     	; 0x4bc <__fp_cmp+0x38>
 4ae:	0a 26       	eor	r0, r26
 4b0:	61 f0       	breq	.+24     	; 0x4ca <__fp_cmp+0x46>
 4b2:	23 2b       	or	r18, r19
 4b4:	24 2b       	or	r18, r20
 4b6:	25 2b       	or	r18, r21
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <__fp_cmp+0x3e>
 4ba:	08 95       	ret
 4bc:	0a 26       	eor	r0, r26
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__fp_cmp+0x3e>
 4c0:	a1 40       	sbci	r26, 0x01	; 1
 4c2:	a6 95       	lsr	r26
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	81 1d       	adc	r24, r1
 4c8:	81 1d       	adc	r24, r1
 4ca:	08 95       	ret

000004cc <__fp_split3>:
 4cc:	57 fd       	sbrc	r21, 7
 4ce:	90 58       	subi	r25, 0x80	; 128
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	59 f0       	breq	.+22     	; 0x4ec <__fp_splitA+0x10>
 4d6:	5f 3f       	cpi	r21, 0xFF	; 255
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__fp_splitA+0x1a>
 4da:	47 95       	ror	r20

000004dc <__fp_splitA>:
 4dc:	88 0f       	add	r24, r24
 4de:	97 fb       	bst	r25, 7
 4e0:	99 1f       	adc	r25, r25
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_splitA+0x20>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	79 f0       	breq	.+30     	; 0x506 <__fp_splitA+0x2a>
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	f2 cf       	rjmp	.-28     	; 0x4da <__fp_split3+0xe>
 4f6:	46 95       	lsr	r20
 4f8:	f1 df       	rcall	.-30     	; 0x4dc <__fp_splitA>
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__fp_splitA+0x30>
 4fc:	16 16       	cp	r1, r22
 4fe:	17 06       	cpc	r1, r23
 500:	18 06       	cpc	r1, r24
 502:	99 1f       	adc	r25, r25
 504:	f1 cf       	rjmp	.-30     	; 0x4e8 <__fp_splitA+0xc>
 506:	86 95       	lsr	r24
 508:	71 05       	cpc	r23, r1
 50a:	61 05       	cpc	r22, r1
 50c:	08 94       	sec
 50e:	08 95       	ret

00000510 <__fp_zero>:
 510:	e8 94       	clt

00000512 <__fp_szero>:
 512:	bb 27       	eor	r27, r27
 514:	66 27       	eor	r22, r22
 516:	77 27       	eor	r23, r23
 518:	cb 01       	movw	r24, r22
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__gesf2>:
 51e:	b2 df       	rcall	.-156    	; 0x484 <__fp_cmp>
 520:	08 f4       	brcc	.+2      	; 0x524 <__gesf2+0x6>
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	08 95       	ret

00000526 <__mulsf3>:
 526:	0b d0       	rcall	.+22     	; 0x53e <__mulsf3x>
 528:	78 c0       	rjmp	.+240    	; 0x61a <__fp_round>
 52a:	69 d0       	rcall	.+210    	; 0x5fe <__fp_pscA>
 52c:	28 f0       	brcs	.+10     	; 0x538 <__mulsf3+0x12>
 52e:	6e d0       	rcall	.+220    	; 0x60c <__fp_pscB>
 530:	18 f0       	brcs	.+6      	; 0x538 <__mulsf3+0x12>
 532:	95 23       	and	r25, r21
 534:	09 f0       	breq	.+2      	; 0x538 <__mulsf3+0x12>
 536:	5a c0       	rjmp	.+180    	; 0x5ec <__fp_inf>
 538:	5f c0       	rjmp	.+190    	; 0x5f8 <__fp_nan>
 53a:	11 24       	eor	r1, r1
 53c:	ea cf       	rjmp	.-44     	; 0x512 <__fp_szero>

0000053e <__mulsf3x>:
 53e:	c6 df       	rcall	.-116    	; 0x4cc <__fp_split3>
 540:	a0 f3       	brcs	.-24     	; 0x52a <__mulsf3+0x4>

00000542 <__mulsf3_pse>:
 542:	95 9f       	mul	r25, r21
 544:	d1 f3       	breq	.-12     	; 0x53a <__mulsf3+0x14>
 546:	95 0f       	add	r25, r21
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	55 1f       	adc	r21, r21
 54c:	62 9f       	mul	r22, r18
 54e:	f0 01       	movw	r30, r0
 550:	72 9f       	mul	r23, r18
 552:	bb 27       	eor	r27, r27
 554:	f0 0d       	add	r31, r0
 556:	b1 1d       	adc	r27, r1
 558:	63 9f       	mul	r22, r19
 55a:	aa 27       	eor	r26, r26
 55c:	f0 0d       	add	r31, r0
 55e:	b1 1d       	adc	r27, r1
 560:	aa 1f       	adc	r26, r26
 562:	64 9f       	mul	r22, r20
 564:	66 27       	eor	r22, r22
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	66 1f       	adc	r22, r22
 56c:	82 9f       	mul	r24, r18
 56e:	22 27       	eor	r18, r18
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	62 1f       	adc	r22, r18
 576:	73 9f       	mul	r23, r19
 578:	b0 0d       	add	r27, r0
 57a:	a1 1d       	adc	r26, r1
 57c:	62 1f       	adc	r22, r18
 57e:	83 9f       	mul	r24, r19
 580:	a0 0d       	add	r26, r0
 582:	61 1d       	adc	r22, r1
 584:	22 1f       	adc	r18, r18
 586:	74 9f       	mul	r23, r20
 588:	33 27       	eor	r19, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	23 1f       	adc	r18, r19
 590:	84 9f       	mul	r24, r20
 592:	60 0d       	add	r22, r0
 594:	21 1d       	adc	r18, r1
 596:	82 2f       	mov	r24, r18
 598:	76 2f       	mov	r23, r22
 59a:	6a 2f       	mov	r22, r26
 59c:	11 24       	eor	r1, r1
 59e:	9f 57       	subi	r25, 0x7F	; 127
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	8a f0       	brmi	.+34     	; 0x5c6 <__mulsf3_pse+0x84>
 5a4:	e1 f0       	breq	.+56     	; 0x5de <__mulsf3_pse+0x9c>
 5a6:	88 23       	and	r24, r24
 5a8:	4a f0       	brmi	.+18     	; 0x5bc <__mulsf3_pse+0x7a>
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	bb 1f       	adc	r27, r27
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	50 40       	sbci	r21, 0x00	; 0
 5ba:	a9 f7       	brne	.-22     	; 0x5a6 <__mulsf3_pse+0x64>
 5bc:	9e 3f       	cpi	r25, 0xFE	; 254
 5be:	51 05       	cpc	r21, r1
 5c0:	70 f0       	brcs	.+28     	; 0x5de <__mulsf3_pse+0x9c>
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <__fp_inf>
 5c4:	a6 cf       	rjmp	.-180    	; 0x512 <__fp_szero>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	ec f3       	brlt	.-6      	; 0x5c4 <__mulsf3_pse+0x82>
 5ca:	98 3e       	cpi	r25, 0xE8	; 232
 5cc:	dc f3       	brlt	.-10     	; 0x5c4 <__mulsf3_pse+0x82>
 5ce:	86 95       	lsr	r24
 5d0:	77 95       	ror	r23
 5d2:	67 95       	ror	r22
 5d4:	b7 95       	ror	r27
 5d6:	f7 95       	ror	r31
 5d8:	e7 95       	ror	r30
 5da:	9f 5f       	subi	r25, 0xFF	; 255
 5dc:	c1 f7       	brne	.-16     	; 0x5ce <__mulsf3_pse+0x8c>
 5de:	fe 2b       	or	r31, r30
 5e0:	88 0f       	add	r24, r24
 5e2:	91 1d       	adc	r25, r1
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__udivmodhi4>:
 63c:	aa 1b       	sub	r26, r26
 63e:	bb 1b       	sub	r27, r27
 640:	51 e1       	ldi	r21, 0x11	; 17
 642:	07 c0       	rjmp	.+14     	; 0x652 <__udivmodhi4_ep>

00000644 <__udivmodhi4_loop>:
 644:	aa 1f       	adc	r26, r26
 646:	bb 1f       	adc	r27, r27
 648:	a6 17       	cp	r26, r22
 64a:	b7 07       	cpc	r27, r23
 64c:	10 f0       	brcs	.+4      	; 0x652 <__udivmodhi4_ep>
 64e:	a6 1b       	sub	r26, r22
 650:	b7 0b       	sbc	r27, r23

00000652 <__udivmodhi4_ep>:
 652:	88 1f       	adc	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	5a 95       	dec	r21
 658:	a9 f7       	brne	.-22     	; 0x644 <__udivmodhi4_loop>
 65a:	80 95       	com	r24
 65c:	90 95       	com	r25
 65e:	bc 01       	movw	r22, r24
 660:	cd 01       	movw	r24, r26
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
