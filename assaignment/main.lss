
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006c0  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003f  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003dd  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000195  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000349  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000107  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ae  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 93 01 	call	0x326	; 0x326 <main>
  7a:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <revers_number>:
#include<util/delay.h>
int d=100;


int revers_number(int n)
  {
  82:	9c 01       	movw	r18, r24
  84:	e0 e0       	ldi	r30, 0x00	; 0
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	17 c0       	rjmp	.+46     	; 0xb8 <revers_number+0x36>

    // reversed integer is stored in variable 
    while( n!=0 )
    {
        remainder = n%10;
        reversedInteger = reversedInteger*10 + remainder;
  8a:	cf 01       	movw	r24, r30
  8c:	53 e0       	ldi	r21, 0x03	; 3
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	5a 95       	dec	r21
  94:	e1 f7       	brne	.-8      	; 0x8e <revers_number+0xc>
  96:	ee 0f       	add	r30, r30
  98:	ff 1f       	adc	r31, r31
  9a:	e8 0f       	add	r30, r24
  9c:	f9 1f       	adc	r31, r25
  9e:	c9 01       	movw	r24, r18
  a0:	6a e0       	ldi	r22, 0x0A	; 10
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
  a8:	e8 0f       	add	r30, r24
  aa:	f9 1f       	adc	r31, r25
        n /= 10;
  ac:	c9 01       	movw	r24, r18
  ae:	6a e0       	ldi	r22, 0x0A	; 10
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
  b6:	9b 01       	movw	r18, r22
   

    originalInteger = n;

    // reversed integer is stored in variable 
    while( n!=0 )
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	31 f7       	brne	.-52     	; 0x8a <revers_number+0x8>
    }

    
    
    return  reversedInteger;
}
  be:	cf 01       	movw	r24, r30
  c0:	08 95       	ret

000000c2 <display>:



void display(int number){
  c2:	6f 92       	push	r6
  c4:	7f 92       	push	r7
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	9c 01       	movw	r18, r24

		int first=number%10;
		int temp=number/10;
  dc:	6a e0       	ldi	r22, 0x0A	; 10
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
  e4:	96 2e       	mov	r9, r22
  e6:	87 2e       	mov	r8, r23
		int second=temp%10;
		temp=temp/10;
  e8:	86 2f       	mov	r24, r22
  ea:	97 2f       	mov	r25, r23
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
  f4:	76 2e       	mov	r7, r22
  f6:	67 2e       	mov	r6, r23
		int third=temp%10;
		temp=temp/10;
		int frth=temp%10;
		
        PORTC=(first|0b11110000); 
  f8:	c9 01       	movw	r24, r18
  fa:	6a e0       	ldi	r22, 0x0A	; 10
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 102:	80 6f       	ori	r24, 0xF0	; 240
 104:	85 bb       	out	0x15, r24	; 21
        PORTC&=~(1<<4);   
 106:	ac 98       	cbi	0x15, 4	; 21
        _delay_ms(d);
 108:	60 91 60 00 	lds	r22, 0x0060
 10c:	70 91 61 00 	lds	r23, 0x0061
 110:	88 27       	eor	r24, r24
 112:	77 fd       	sbrc	r23, 7
 114:	80 95       	com	r24
 116:	98 2f       	mov	r25, r24
 118:	0e 94 20 02 	call	0x440	; 0x440 <__floatsisf>
 11c:	5b 01       	movw	r10, r22
 11e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4a ef       	ldi	r20, 0xFA	; 250
 126:	54 e4       	ldi	r21, 0x44	; 68
 128:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 12c:	7b 01       	movw	r14, r22
 12e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e8       	ldi	r20, 0x80	; 128
 136:	5f e3       	ldi	r21, 0x3F	; 63
 138:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	1c f4       	brge	.+6      	; 0x146 <display+0x84>
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	24 c0       	rjmp	.+72     	; 0x18e <display+0xcc>
		__ticks = 1;
	else if (__tmp > 65535)
 146:	c8 01       	movw	r24, r16
 148:	b7 01       	movw	r22, r14
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	3f ef       	ldi	r19, 0xFF	; 255
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	57 e4       	ldi	r21, 0x47	; 71
 152:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 156:	18 16       	cp	r1, r24
 158:	b4 f4       	brge	.+44     	; 0x186 <display+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 15a:	c6 01       	movw	r24, r12
 15c:	b5 01       	movw	r22, r10
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e2       	ldi	r20, 0x20	; 32
 164:	51 e4       	ldi	r21, 0x41	; 65
 166:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 16a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16e:	88 ec       	ldi	r24, 0xC8	; 200
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	05 c0       	rjmp	.+10     	; 0x17e <display+0xbc>
 174:	fc 01       	movw	r30, r24
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <display+0xb4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17a:	61 50       	subi	r22, 0x01	; 1
 17c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	61 15       	cp	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	c1 f7       	brne	.-16     	; 0x174 <display+0xb2>
 184:	07 c0       	rjmp	.+14     	; 0x194 <display+0xd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	c8 01       	movw	r24, r16
 188:	b7 01       	movw	r22, r14
 18a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 18e:	cb 01       	movw	r24, r22
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <display+0xce>
		
		PORTC=(second|0b11110000); 
 194:	89 2d       	mov	r24, r9
 196:	98 2d       	mov	r25, r8
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 1a0:	80 6f       	ori	r24, 0xF0	; 240
 1a2:	85 bb       	out	0x15, r24	; 21
        PORTC&=~(1<<5);   
 1a4:	ad 98       	cbi	0x15, 5	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1a6:	c8 01       	movw	r24, r16
 1a8:	b7 01       	movw	r22, r14
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e8       	ldi	r20, 0x80	; 128
 1b0:	5f e3       	ldi	r21, 0x3F	; 63
 1b2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__cmpsf2>
 1b6:	88 23       	and	r24, r24
 1b8:	1c f4       	brge	.+6      	; 0x1c0 <display+0xfe>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	24 c0       	rjmp	.+72     	; 0x208 <display+0x146>
		__ticks = 1;
	else if (__tmp > 65535)
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	57 e4       	ldi	r21, 0x47	; 71
 1cc:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 1d0:	18 16       	cp	r1, r24
 1d2:	b4 f4       	brge	.+44     	; 0x200 <display+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1d4:	c6 01       	movw	r24, r12
 1d6:	b5 01       	movw	r22, r10
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e2       	ldi	r20, 0x20	; 32
 1de:	51 e4       	ldi	r21, 0x41	; 65
 1e0:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 1e4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 1e8:	88 ec       	ldi	r24, 0xC8	; 200
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <display+0x136>
 1ee:	fc 01       	movw	r30, r24
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <display+0x12e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	61 50       	subi	r22, 0x01	; 1
 1f6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	61 15       	cp	r22, r1
 1fa:	71 05       	cpc	r23, r1
 1fc:	c1 f7       	brne	.-16     	; 0x1ee <display+0x12c>
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <display+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 200:	c8 01       	movw	r24, r16
 202:	b7 01       	movw	r22, r14
 204:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 208:	cb 01       	movw	r24, r22
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <display+0x148>
        _delay_ms(d);
		
		PORTC=(third|0b11110000); 
 20e:	87 2d       	mov	r24, r7
 210:	96 2d       	mov	r25, r6
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 21a:	80 6f       	ori	r24, 0xF0	; 240
 21c:	85 bb       	out	0x15, r24	; 21
        PORTC&=~(1<<6);   
 21e:	ae 98       	cbi	0x15, 6	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 220:	c8 01       	movw	r24, r16
 222:	b7 01       	movw	r22, r14
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e8       	ldi	r20, 0x80	; 128
 22a:	5f e3       	ldi	r21, 0x3F	; 63
 22c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__cmpsf2>
 230:	88 23       	and	r24, r24
 232:	1c f4       	brge	.+6      	; 0x23a <display+0x178>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	24 c0       	rjmp	.+72     	; 0x282 <display+0x1c0>
		__ticks = 1;
	else if (__tmp > 65535)
 23a:	c8 01       	movw	r24, r16
 23c:	b7 01       	movw	r22, r14
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	3f ef       	ldi	r19, 0xFF	; 255
 242:	4f e7       	ldi	r20, 0x7F	; 127
 244:	57 e4       	ldi	r21, 0x47	; 71
 246:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 24a:	18 16       	cp	r1, r24
 24c:	b4 f4       	brge	.+44     	; 0x27a <display+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24e:	c6 01       	movw	r24, r12
 250:	b5 01       	movw	r22, r10
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e2       	ldi	r20, 0x20	; 32
 258:	51 e4       	ldi	r21, 0x41	; 65
 25a:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 25e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 262:	88 ec       	ldi	r24, 0xC8	; 200
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	05 c0       	rjmp	.+10     	; 0x272 <display+0x1b0>
 268:	fc 01       	movw	r30, r24
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <display+0x1a8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	61 50       	subi	r22, 0x01	; 1
 270:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 272:	61 15       	cp	r22, r1
 274:	71 05       	cpc	r23, r1
 276:	c1 f7       	brne	.-16     	; 0x268 <display+0x1a6>
 278:	07 c0       	rjmp	.+14     	; 0x288 <display+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 27a:	c8 01       	movw	r24, r16
 27c:	b7 01       	movw	r22, r14
 27e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 282:	cb 01       	movw	r24, r22
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <display+0x1c2>
        _delay_ms(d);
		
		PORTC=(frth|0b11110000); 
 288:	87 2d       	mov	r24, r7
 28a:	96 2d       	mov	r25, r6
 28c:	6a e0       	ldi	r22, 0x0A	; 10
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 294:	cb 01       	movw	r24, r22
 296:	6a e0       	ldi	r22, 0x0A	; 10
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 29e:	80 6f       	ori	r24, 0xF0	; 240
 2a0:	85 bb       	out	0x15, r24	; 21
        PORTC&=~(1<<7);   
 2a2:	af 98       	cbi	0x15, 7	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2a4:	c8 01       	movw	r24, r16
 2a6:	b7 01       	movw	r22, r14
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	1c f4       	brge	.+6      	; 0x2be <display+0x1fc>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	24 c0       	rjmp	.+72     	; 0x306 <display+0x244>
		__ticks = 1;
	else if (__tmp > 65535)
 2be:	c8 01       	movw	r24, r16
 2c0:	b7 01       	movw	r22, r14
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 2ce:	18 16       	cp	r1, r24
 2d0:	b4 f4       	brge	.+44     	; 0x2fe <display+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d2:	c6 01       	movw	r24, r12
 2d4:	b5 01       	movw	r22, r10
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e2       	ldi	r20, 0x20	; 32
 2dc:	51 e4       	ldi	r21, 0x41	; 65
 2de:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 2e2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 2e6:	88 ec       	ldi	r24, 0xC8	; 200
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <display+0x234>
 2ec:	fc 01       	movw	r30, r24
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <display+0x22c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f2:	61 50       	subi	r22, 0x01	; 1
 2f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	61 15       	cp	r22, r1
 2f8:	71 05       	cpc	r23, r1
 2fa:	c1 f7       	brne	.-16     	; 0x2ec <display+0x22a>
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <display+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fe:	c8 01       	movw	r24, r16
 300:	b7 01       	movw	r22, r14
 302:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 306:	cb 01       	movw	r24, r22
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <display+0x246>
        _delay_ms(d);


}
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	cf 90       	pop	r12
 318:	bf 90       	pop	r11
 31a:	af 90       	pop	r10
 31c:	9f 90       	pop	r9
 31e:	8f 90       	pop	r8
 320:	7f 90       	pop	r7
 322:	6f 90       	pop	r6
 324:	08 95       	ret

00000326 <main>:

void main()
  {
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
		DDRC=0b11111111;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	84 bb       	out	0x14, r24	; 20
		DDRB=0b11111111;
 336:	87 bb       	out	0x17, r24	; 23
 338:	00 e0       	ldi	r16, 0x00	; 0
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	d0 e0       	ldi	r29, 0x00	; 0
 340:	a8 ec       	ldi	r26, 0xC8	; 200
 342:	ea 2e       	mov	r14, r26
 344:	f1 2c       	mov	r15, r1
  while(1){
			
  
			for(int i=0;i<=9;i++){
			
				number=number*10+i;
 346:	ce 01       	movw	r24, r28
 348:	f3 e0       	ldi	r31, 0x03	; 3
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	fa 95       	dec	r31
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x24>
 352:	cc 0f       	add	r28, r28
 354:	dd 1f       	adc	r29, r29
 356:	c8 0f       	add	r28, r24
 358:	d9 1f       	adc	r29, r25
 35a:	c0 0f       	add	r28, r16
 35c:	d1 1f       	adc	r29, r17
				display(number);
 35e:	ce 01       	movw	r24, r28
 360:	0e 94 61 00 	call	0xc2	; 0xc2 <display>
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	f7 01       	movw	r30, r14
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 370:	d9 f7       	brne	.-10     	; 0x368 <main+0x42>
				_delay_ms(100);
				if(number%10==0){
 372:	ce 01       	movw	r24, r28
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 37c:	89 2b       	or	r24, r25
 37e:	b1 f4       	brne	.+44     	; 0x3ac <main+0x86>
				int rev=revers_number(number);
 380:	ce 01       	movw	r24, r28
 382:	0e 94 41 00 	call	0x82	; 0x82 <revers_number>
				int temp=rev/10;
				number=revers_number(temp)*10;}
 386:	6a e0       	ldi	r22, 0x0A	; 10
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 38e:	cb 01       	movw	r24, r22
 390:	0e 94 41 00 	call	0x82	; 0x82 <revers_number>
 394:	9c 01       	movw	r18, r24
 396:	ec 01       	movw	r28, r24
 398:	73 e0       	ldi	r23, 0x03	; 3
 39a:	cc 0f       	add	r28, r28
 39c:	dd 1f       	adc	r29, r29
 39e:	7a 95       	dec	r23
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x74>
 3a2:	22 0f       	add	r18, r18
 3a4:	33 1f       	adc	r19, r19
 3a6:	c2 0f       	add	r28, r18
 3a8:	d3 1f       	adc	r29, r19
 3aa:	0f c0       	rjmp	.+30     	; 0x3ca <main+0xa4>
				else if(number>=1234){
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	c2 3d       	cpi	r28, 0xD2	; 210
 3b0:	d8 07       	cpc	r29, r24
 3b2:	5c f0       	brlt	.+22     	; 0x3ca <main+0xa4>
				int rev=revers_number(number);
 3b4:	ce 01       	movw	r24, r28
 3b6:	0e 94 41 00 	call	0x82	; 0x82 <revers_number>
				int temp=rev/10;
				number=revers_number(temp);}
 3ba:	6a e0       	ldi	r22, 0x0A	; 10
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 3c2:	cb 01       	movw	r24, r22
 3c4:	0e 94 41 00 	call	0x82	; 0x82 <revers_number>
 3c8:	ec 01       	movw	r28, r24
		     
  
  while(1){
			
  
			for(int i=0;i<=9;i++){
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	0a 30       	cpi	r16, 0x0A	; 10
 3d0:	11 05       	cpc	r17, r1
 3d2:	0c f4       	brge	.+2      	; 0x3d6 <main+0xb0>
 3d4:	b8 cf       	rjmp	.-144    	; 0x346 <main+0x20>
 3d6:	00 e0       	ldi	r16, 0x00	; 0
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	b5 cf       	rjmp	.-150    	; 0x346 <main+0x20>

000003dc <__cmpsf2>:
 3dc:	6c d0       	rcall	.+216    	; 0x4b6 <__fp_cmp>
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <__cmpsf2+0x6>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret

000003e4 <__fixunssfsi>:
 3e4:	94 d0       	rcall	.+296    	; 0x50e <__fp_splitA>
 3e6:	88 f0       	brcs	.+34     	; 0x40a <__fixunssfsi+0x26>
 3e8:	9f 57       	subi	r25, 0x7F	; 127
 3ea:	90 f0       	brcs	.+36     	; 0x410 <__fixunssfsi+0x2c>
 3ec:	b9 2f       	mov	r27, r25
 3ee:	99 27       	eor	r25, r25
 3f0:	b7 51       	subi	r27, 0x17	; 23
 3f2:	a0 f0       	brcs	.+40     	; 0x41c <__fixunssfsi+0x38>
 3f4:	d1 f0       	breq	.+52     	; 0x42a <__fixunssfsi+0x46>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	1a f0       	brmi	.+6      	; 0x406 <__fixunssfsi+0x22>
 400:	ba 95       	dec	r27
 402:	c9 f7       	brne	.-14     	; 0x3f6 <__fixunssfsi+0x12>
 404:	12 c0       	rjmp	.+36     	; 0x42a <__fixunssfsi+0x46>
 406:	b1 30       	cpi	r27, 0x01	; 1
 408:	81 f0       	breq	.+32     	; 0x42a <__fixunssfsi+0x46>
 40a:	9b d0       	rcall	.+310    	; 0x542 <__fp_zero>
 40c:	b1 e0       	ldi	r27, 0x01	; 1
 40e:	08 95       	ret
 410:	98 c0       	rjmp	.+304    	; 0x542 <__fp_zero>
 412:	67 2f       	mov	r22, r23
 414:	78 2f       	mov	r23, r24
 416:	88 27       	eor	r24, r24
 418:	b8 5f       	subi	r27, 0xF8	; 248
 41a:	39 f0       	breq	.+14     	; 0x42a <__fixunssfsi+0x46>
 41c:	b9 3f       	cpi	r27, 0xF9	; 249
 41e:	cc f3       	brlt	.-14     	; 0x412 <__fixunssfsi+0x2e>
 420:	86 95       	lsr	r24
 422:	77 95       	ror	r23
 424:	67 95       	ror	r22
 426:	b3 95       	inc	r27
 428:	d9 f7       	brne	.-10     	; 0x420 <__fixunssfsi+0x3c>
 42a:	3e f4       	brtc	.+14     	; 0x43a <__fixunssfsi+0x56>
 42c:	90 95       	com	r25
 42e:	80 95       	com	r24
 430:	70 95       	com	r23
 432:	61 95       	neg	r22
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__floatunsisf>:
 43c:	e8 94       	clt
 43e:	09 c0       	rjmp	.+18     	; 0x452 <__floatsisf+0x12>

00000440 <__floatsisf>:
 440:	97 fb       	bst	r25, 7
 442:	3e f4       	brtc	.+14     	; 0x452 <__floatsisf+0x12>
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	99 23       	and	r25, r25
 454:	a9 f0       	breq	.+42     	; 0x480 <__floatsisf+0x40>
 456:	f9 2f       	mov	r31, r25
 458:	96 e9       	ldi	r25, 0x96	; 150
 45a:	bb 27       	eor	r27, r27
 45c:	93 95       	inc	r25
 45e:	f6 95       	lsr	r31
 460:	87 95       	ror	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f1 11       	cpse	r31, r1
 46a:	f8 cf       	rjmp	.-16     	; 0x45c <__floatsisf+0x1c>
 46c:	fa f4       	brpl	.+62     	; 0x4ac <__floatsisf+0x6c>
 46e:	bb 0f       	add	r27, r27
 470:	11 f4       	brne	.+4      	; 0x476 <__floatsisf+0x36>
 472:	60 ff       	sbrs	r22, 0
 474:	1b c0       	rjmp	.+54     	; 0x4ac <__floatsisf+0x6c>
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	16 c0       	rjmp	.+44     	; 0x4ac <__floatsisf+0x6c>
 480:	88 23       	and	r24, r24
 482:	11 f0       	breq	.+4      	; 0x488 <__floatsisf+0x48>
 484:	96 e9       	ldi	r25, 0x96	; 150
 486:	11 c0       	rjmp	.+34     	; 0x4aa <__floatsisf+0x6a>
 488:	77 23       	and	r23, r23
 48a:	21 f0       	breq	.+8      	; 0x494 <__floatsisf+0x54>
 48c:	9e e8       	ldi	r25, 0x8E	; 142
 48e:	87 2f       	mov	r24, r23
 490:	76 2f       	mov	r23, r22
 492:	05 c0       	rjmp	.+10     	; 0x49e <__floatsisf+0x5e>
 494:	66 23       	and	r22, r22
 496:	71 f0       	breq	.+28     	; 0x4b4 <__floatsisf+0x74>
 498:	96 e8       	ldi	r25, 0x86	; 134
 49a:	86 2f       	mov	r24, r22
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	2a f0       	brmi	.+10     	; 0x4ac <__floatsisf+0x6c>
 4a2:	9a 95       	dec	r25
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	da f7       	brpl	.-10     	; 0x4a2 <__floatsisf+0x62>
 4ac:	88 0f       	add	r24, r24
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	97 f9       	bld	r25, 7
 4b4:	08 95       	ret

000004b6 <__fp_cmp>:
 4b6:	99 0f       	add	r25, r25
 4b8:	00 08       	sbc	r0, r0
 4ba:	55 0f       	add	r21, r21
 4bc:	aa 0b       	sbc	r26, r26
 4be:	e0 e8       	ldi	r30, 0x80	; 128
 4c0:	fe ef       	ldi	r31, 0xFE	; 254
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	e8 07       	cpc	r30, r24
 4c8:	f9 07       	cpc	r31, r25
 4ca:	c0 f0       	brcs	.+48     	; 0x4fc <__fp_cmp+0x46>
 4cc:	12 16       	cp	r1, r18
 4ce:	13 06       	cpc	r1, r19
 4d0:	e4 07       	cpc	r30, r20
 4d2:	f5 07       	cpc	r31, r21
 4d4:	98 f0       	brcs	.+38     	; 0x4fc <__fp_cmp+0x46>
 4d6:	62 1b       	sub	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	95 0b       	sbc	r25, r21
 4de:	39 f4       	brne	.+14     	; 0x4ee <__fp_cmp+0x38>
 4e0:	0a 26       	eor	r0, r26
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_cmp+0x46>
 4e4:	23 2b       	or	r18, r19
 4e6:	24 2b       	or	r18, r20
 4e8:	25 2b       	or	r18, r21
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__fp_cmp+0x3e>
 4ec:	08 95       	ret
 4ee:	0a 26       	eor	r0, r26
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <__fp_cmp+0x3e>
 4f2:	a1 40       	sbci	r26, 0x01	; 1
 4f4:	a6 95       	lsr	r26
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	81 1d       	adc	r24, r1
 4fa:	81 1d       	adc	r24, r1
 4fc:	08 95       	ret

000004fe <__fp_split3>:
 4fe:	57 fd       	sbrc	r21, 7
 500:	90 58       	subi	r25, 0x80	; 128
 502:	44 0f       	add	r20, r20
 504:	55 1f       	adc	r21, r21
 506:	59 f0       	breq	.+22     	; 0x51e <__fp_splitA+0x10>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	71 f0       	breq	.+28     	; 0x528 <__fp_splitA+0x1a>
 50c:	47 95       	ror	r20

0000050e <__fp_splitA>:
 50e:	88 0f       	add	r24, r24
 510:	97 fb       	bst	r25, 7
 512:	99 1f       	adc	r25, r25
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_splitA+0x20>
 516:	9f 3f       	cpi	r25, 0xFF	; 255
 518:	79 f0       	breq	.+30     	; 0x538 <__fp_splitA+0x2a>
 51a:	87 95       	ror	r24
 51c:	08 95       	ret
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	14 06       	cpc	r1, r20
 524:	55 1f       	adc	r21, r21
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__fp_split3+0xe>
 528:	46 95       	lsr	r20
 52a:	f1 df       	rcall	.-30     	; 0x50e <__fp_splitA>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__fp_splitA+0x30>
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	99 1f       	adc	r25, r25
 536:	f1 cf       	rjmp	.-30     	; 0x51a <__fp_splitA+0xc>
 538:	86 95       	lsr	r24
 53a:	71 05       	cpc	r23, r1
 53c:	61 05       	cpc	r22, r1
 53e:	08 94       	sec
 540:	08 95       	ret

00000542 <__fp_zero>:
 542:	e8 94       	clt

00000544 <__fp_szero>:
 544:	bb 27       	eor	r27, r27
 546:	66 27       	eor	r22, r22
 548:	77 27       	eor	r23, r23
 54a:	cb 01       	movw	r24, r22
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__gesf2>:
 550:	b2 df       	rcall	.-156    	; 0x4b6 <__fp_cmp>
 552:	08 f4       	brcc	.+2      	; 0x556 <__gesf2+0x6>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	08 95       	ret

00000558 <__mulsf3>:
 558:	0b d0       	rcall	.+22     	; 0x570 <__mulsf3x>
 55a:	78 c0       	rjmp	.+240    	; 0x64c <__fp_round>
 55c:	69 d0       	rcall	.+210    	; 0x630 <__fp_pscA>
 55e:	28 f0       	brcs	.+10     	; 0x56a <__mulsf3+0x12>
 560:	6e d0       	rcall	.+220    	; 0x63e <__fp_pscB>
 562:	18 f0       	brcs	.+6      	; 0x56a <__mulsf3+0x12>
 564:	95 23       	and	r25, r21
 566:	09 f0       	breq	.+2      	; 0x56a <__mulsf3+0x12>
 568:	5a c0       	rjmp	.+180    	; 0x61e <__fp_inf>
 56a:	5f c0       	rjmp	.+190    	; 0x62a <__fp_nan>
 56c:	11 24       	eor	r1, r1
 56e:	ea cf       	rjmp	.-44     	; 0x544 <__fp_szero>

00000570 <__mulsf3x>:
 570:	c6 df       	rcall	.-116    	; 0x4fe <__fp_split3>
 572:	a0 f3       	brcs	.-24     	; 0x55c <__mulsf3+0x4>

00000574 <__mulsf3_pse>:
 574:	95 9f       	mul	r25, r21
 576:	d1 f3       	breq	.-12     	; 0x56c <__mulsf3+0x14>
 578:	95 0f       	add	r25, r21
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	55 1f       	adc	r21, r21
 57e:	62 9f       	mul	r22, r18
 580:	f0 01       	movw	r30, r0
 582:	72 9f       	mul	r23, r18
 584:	bb 27       	eor	r27, r27
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	63 9f       	mul	r22, r19
 58c:	aa 27       	eor	r26, r26
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	aa 1f       	adc	r26, r26
 594:	64 9f       	mul	r22, r20
 596:	66 27       	eor	r22, r22
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	66 1f       	adc	r22, r22
 59e:	82 9f       	mul	r24, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	73 9f       	mul	r23, r19
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	83 9f       	mul	r24, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	22 1f       	adc	r18, r18
 5b8:	74 9f       	mul	r23, r20
 5ba:	33 27       	eor	r19, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	23 1f       	adc	r18, r19
 5c2:	84 9f       	mul	r24, r20
 5c4:	60 0d       	add	r22, r0
 5c6:	21 1d       	adc	r18, r1
 5c8:	82 2f       	mov	r24, r18
 5ca:	76 2f       	mov	r23, r22
 5cc:	6a 2f       	mov	r22, r26
 5ce:	11 24       	eor	r1, r1
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	8a f0       	brmi	.+34     	; 0x5f8 <__mulsf3_pse+0x84>
 5d6:	e1 f0       	breq	.+56     	; 0x610 <__mulsf3_pse+0x9c>
 5d8:	88 23       	and	r24, r24
 5da:	4a f0       	brmi	.+18     	; 0x5ee <__mulsf3_pse+0x7a>
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__mulsf3_pse+0x64>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	70 f0       	brcs	.+28     	; 0x610 <__mulsf3_pse+0x9c>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fp_inf>
 5f6:	a6 cf       	rjmp	.-180    	; 0x544 <__fp_szero>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	ec f3       	brlt	.-6      	; 0x5f6 <__mulsf3_pse+0x82>
 5fc:	98 3e       	cpi	r25, 0xE8	; 232
 5fe:	dc f3       	brlt	.-10     	; 0x5f6 <__mulsf3_pse+0x82>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f7 95       	ror	r31
 60a:	e7 95       	ror	r30
 60c:	9f 5f       	subi	r25, 0xFF	; 255
 60e:	c1 f7       	brne	.-16     	; 0x600 <__mulsf3_pse+0x8c>
 610:	fe 2b       	or	r31, r30
 612:	88 0f       	add	r24, r24
 614:	91 1d       	adc	r25, r1
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__fp_inf>:
 61e:	97 f9       	bld	r25, 7
 620:	9f 67       	ori	r25, 0x7F	; 127
 622:	80 e8       	ldi	r24, 0x80	; 128
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	08 95       	ret

0000062a <__fp_nan>:
 62a:	9f ef       	ldi	r25, 0xFF	; 255
 62c:	80 ec       	ldi	r24, 0xC0	; 192
 62e:	08 95       	ret

00000630 <__fp_pscA>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	09 06       	cpc	r0, r25
 63c:	08 95       	ret

0000063e <__fp_pscB>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	14 06       	cpc	r1, r20
 648:	05 06       	cpc	r0, r21
 64a:	08 95       	ret

0000064c <__fp_round>:
 64c:	09 2e       	mov	r0, r25
 64e:	03 94       	inc	r0
 650:	00 0c       	add	r0, r0
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_round+0xc>
 654:	88 23       	and	r24, r24
 656:	52 f0       	brmi	.+20     	; 0x66c <__fp_round+0x20>
 658:	bb 0f       	add	r27, r27
 65a:	40 f4       	brcc	.+16     	; 0x66c <__fp_round+0x20>
 65c:	bf 2b       	or	r27, r31
 65e:	11 f4       	brne	.+4      	; 0x664 <__fp_round+0x18>
 660:	60 ff       	sbrs	r22, 0
 662:	04 c0       	rjmp	.+8      	; 0x66c <__fp_round+0x20>
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__divmodhi4>:
 66e:	97 fb       	bst	r25, 7
 670:	09 2e       	mov	r0, r25
 672:	07 26       	eor	r0, r23
 674:	0a d0       	rcall	.+20     	; 0x68a <__divmodhi4_neg1>
 676:	77 fd       	sbrc	r23, 7
 678:	04 d0       	rcall	.+8      	; 0x682 <__divmodhi4_neg2>
 67a:	0c d0       	rcall	.+24     	; 0x694 <__udivmodhi4>
 67c:	06 d0       	rcall	.+12     	; 0x68a <__divmodhi4_neg1>
 67e:	00 20       	and	r0, r0
 680:	1a f4       	brpl	.+6      	; 0x688 <__divmodhi4_exit>

00000682 <__divmodhi4_neg2>:
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255

00000688 <__divmodhi4_exit>:
 688:	08 95       	ret

0000068a <__divmodhi4_neg1>:
 68a:	f6 f7       	brtc	.-4      	; 0x688 <__divmodhi4_exit>
 68c:	90 95       	com	r25
 68e:	81 95       	neg	r24
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__udivmodhi4>:
 694:	aa 1b       	sub	r26, r26
 696:	bb 1b       	sub	r27, r27
 698:	51 e1       	ldi	r21, 0x11	; 17
 69a:	07 c0       	rjmp	.+14     	; 0x6aa <__udivmodhi4_ep>

0000069c <__udivmodhi4_loop>:
 69c:	aa 1f       	adc	r26, r26
 69e:	bb 1f       	adc	r27, r27
 6a0:	a6 17       	cp	r26, r22
 6a2:	b7 07       	cpc	r27, r23
 6a4:	10 f0       	brcs	.+4      	; 0x6aa <__udivmodhi4_ep>
 6a6:	a6 1b       	sub	r26, r22
 6a8:	b7 0b       	sbc	r27, r23

000006aa <__udivmodhi4_ep>:
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	5a 95       	dec	r21
 6b0:	a9 f7       	brne	.-22     	; 0x69c <__udivmodhi4_loop>
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	bc 01       	movw	r22, r24
 6b8:	cd 01       	movw	r24, r26
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
