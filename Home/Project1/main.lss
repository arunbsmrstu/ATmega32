
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000144  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000036  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000193  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ea  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000182  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e8  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char button_previous_status=0;

int main(){
	char button_status_previous=0;
	DDRB|=0b11111111;
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	87 bb       	out	0x17, r24	; 23
	DDRA&=0b11111110;
  82:	d0 98       	cbi	0x1a, 0	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	48 ec       	ldi	r20, 0xC8	; 200
  86:	50 e0       	ldi	r21, 0x00	; 0
	
	
	while(1){
	
			
			char button_status=PINA & (1<<0);
  88:	29 b3       	in	r18, 0x19	; 25
			PORTB|=0b10000001;
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	81 68       	ori	r24, 0x81	; 129
  8e:	88 bb       	out	0x18, r24	; 24
  90:	88 ee       	ldi	r24, 0xE8	; 232
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	fa 01       	movw	r30, r20
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9c:	d9 f7       	brne	.-10     	; 0x94 <main+0x18>
			_delay_ms(100);
			PORTB&=0b01111111;
  9e:	c7 98       	cbi	0x18, 7	; 24
  a0:	88 ee       	ldi	r24, 0xE8	; 232
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	fa 01       	movw	r30, r20
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <main+0x28>
			_delay_ms(100);
			

			if(button_status){
  ae:	20 ff       	sbrs	r18, 0
  b0:	06 c0       	rjmp	.+12     	; 0xbe <main+0x42>
						
						
						PORTB|=0b01010101;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	85 65       	ori	r24, 0x55	; 85
  b6:	88 bb       	out	0x18, r24	; 24
						PORTB&=0b01010101;
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	85 75       	andi	r24, 0x55	; 85
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <main+0x4c>
						
					
			
			}else{
					   
					   PORTB|=0b00101011;
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8b 62       	ori	r24, 0x2B	; 43
  c2:	88 bb       	out	0x18, r24	; 24
				       PORTB&=0b00101011;
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8b 72       	andi	r24, 0x2B	; 43
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	de cf       	rjmp	.-68     	; 0x88 <main+0xc>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
