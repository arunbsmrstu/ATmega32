
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025a  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000100  00000000  00000000  000003ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ef  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ad  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000170  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  6c:	1f 93       	push	r17

	DDRA|=0b11111111;
  6e:	8a b3       	in	r24, 0x1a	; 26
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
	
	while(1){
	
	
		PORTA|=0b11111111;
  74:	1f ef       	ldi	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	48 ec       	ldi	r20, 0xC8	; 200
  78:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		PORTA&=0b00000000;
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
			PORTA=1<<i;
  7a:	a1 e0       	ldi	r26, 0x01	; 1
  7c:	b0 e0       	ldi	r27, 0x00	; 0
		
		PORTA&=0b00000000;
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
			PORTA=0b10000000>>i;
  7e:	60 e8       	ldi	r22, 0x80	; 128
  80:	70 e0       	ldi	r23, 0x00	; 0
	DDRA|=0b11111111;
	
	while(1){
	
	
		PORTA|=0b11111111;
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	1b bb       	out	0x1b, r17	; 27
  86:	88 e8       	ldi	r24, 0x88	; 136
  88:	93 e1       	ldi	r25, 0x13	; 19
  8a:	fa 01       	movw	r30, r20
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x1e>
		_delay_ms(500);
		PORTA&=0b00000000;
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	1b ba       	out	0x1b, r1	; 27
  98:	88 e8       	ldi	r24, 0x88	; 136
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	fa 01       	movw	r30, r20
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x30>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
			PORTA=1<<i;
  aa:	cd 01       	movw	r24, r26
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x48>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x44>
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	88 e8       	ldi	r24, 0x88	; 136
  bc:	93 e1       	ldi	r25, 0x13	; 19
  be:	fa 01       	movw	r30, r20
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x52>
		PORTA|=0b11111111;
		_delay_ms(500);
		PORTA&=0b00000000;
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	28 30       	cpi	r18, 0x08	; 8
  ce:	31 05       	cpc	r19, r1
  d0:	61 f7       	brne	.-40     	; 0xaa <main+0x3e>
			PORTA=1<<i;
			_delay_ms(500);
		
		}
		
		PORTA&=0b00000000;
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	1b ba       	out	0x1b, r1	; 27
  d6:	88 e8       	ldi	r24, 0x88	; 136
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	fa 01       	movw	r30, r20
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x6e>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
			PORTA=0b10000000>>i;
  e8:	cb 01       	movw	r24, r22
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x86>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x82>
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	fa 01       	movw	r30, r20
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x90>
		}
		
		PORTA&=0b00000000;
		_delay_ms(500);
		
		for(int i=0;i<=7;i++){
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	28 30       	cpi	r18, 0x08	; 8
 10c:	31 05       	cpc	r19, r1
 10e:	61 f7       	brne	.-40     	; 0xe8 <main+0x7c>
 110:	b8 cf       	rjmp	.-144    	; 0x82 <main+0x16>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
