
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000096  00000000  00000000  00000125  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000057  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000088  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000079  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<util/delay.h>

int main(){


	DDRB |= 0b01111111; //OUTPUT
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 67       	ori	r24, 0x7F	; 127
  70:	87 bb       	out	0x17, r24	; 23
	DDRA &= 0b11111110; //INPUT
  72:	d0 98       	cbi	0x1a, 0	; 26
	while(1){
	
	
		char button_status = PINA & 0b00000001;//check button status
		
		if(button_status){
  74:	c8 9b       	sbis	0x19, 0	; 25
  76:	06 c0       	rjmp	.+12     	; 0x84 <main+0x18>
		
				
				PORTB |= 0b01010101;
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	85 65       	ori	r24, 0x55	; 85
  7c:	88 bb       	out	0x18, r24	; 24
				PORTB &= 0b01010101;
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	85 75       	andi	r24, 0x55	; 85
  82:	05 c0       	rjmp	.+10     	; 0x8e <main+0x22>
		
		}else{
		
			PORTB |= 0b00101011;
  84:	88 b3       	in	r24, 0x18	; 24
  86:	8b 62       	ori	r24, 0x2B	; 43
  88:	88 bb       	out	0x18, r24	; 24
			PORTB &= 0b00101011;
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8b 72       	andi	r24, 0x2B	; 43
  8e:	88 bb       	out	0x18, r24	; 24
  90:	f1 cf       	rjmp	.-30     	; 0x74 <main+0x8>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
