
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000013a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002d  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c9  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000068  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000aa  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000076  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000089  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
char b1_p=0;
char b2_p=0;

int main(){

	DDRA=DDRA | 0b00000011;
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	8a bb       	out	0x1a, r24	; 26
	DDRA=DDRA & 0b11110011;
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	8a bb       	out	0x1a, r24	; 26
  88:	40 91 61 00 	lds	r20, 0x0061
  8c:	20 91 60 00 	lds	r18, 0x0060
		char b1_c=PINA & 0b00000100;
	    char b2_c=PINA & 0b00001000;
	
	
	if(b1_c && (b1_c!=b1_p))
		PORTA=PORTA ^ 0b00000001;
  90:	61 e0       	ldi	r22, 0x01	; 1
		//_delay_ms(500);
		
	if(b2_c && (b2_c!=b2_p))
		PORTA=PORTA ^ 0b00000010;
  92:	52 e0       	ldi	r21, 0x02	; 2
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x1e>
char b2_p=0;

int main(){

	DDRA=DDRA | 0b00000011;
	DDRA=DDRA & 0b11110011;
  96:	49 2f       	mov	r20, r25
  98:	23 2f       	mov	r18, r19
	
	while(1){
	
		char b1_c=PINA & 0b00000100;
  9a:	89 b3       	in	r24, 0x19	; 25
	    char b2_c=PINA & 0b00001000;
  9c:	99 b3       	in	r25, 0x19	; 25
  9e:	98 70       	andi	r25, 0x08	; 8
	
	
	if(b1_c && (b1_c!=b1_p))
  a0:	38 2f       	mov	r19, r24
  a2:	34 70       	andi	r19, 0x04	; 4
  a4:	82 ff       	sbrs	r24, 2
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x36>
  a8:	32 17       	cp	r19, r18
  aa:	19 f0       	breq	.+6      	; 0xb2 <main+0x36>
		PORTA=PORTA ^ 0b00000001;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	86 27       	eor	r24, r22
  b0:	8b bb       	out	0x1b, r24	; 27
		//_delay_ms(500);
		
	if(b2_c && (b2_c!=b2_p))
  b2:	99 23       	and	r25, r25
  b4:	81 f3       	breq	.-32     	; 0x96 <main+0x1a>
  b6:	94 17       	cp	r25, r20
  b8:	71 f3       	breq	.-36     	; 0x96 <main+0x1a>
		PORTA=PORTA ^ 0b00000010;
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	85 27       	eor	r24, r21
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	ea cf       	rjmp	.-44     	; 0x96 <main+0x1a>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
