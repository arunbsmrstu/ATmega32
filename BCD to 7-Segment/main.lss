
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001d4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000027  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001de  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e2  00000000  00000000  000003f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d6  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include<avr/io.h>
#include<util/delay.h>
int a,b;

void main()
  {
  7c:	bf 92       	push	r11
  7e:	cf 92       	push	r12
  80:	df 92       	push	r13
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
		DDRA=0b11111111;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
		DDRB=0b11111111;
  8e:	87 bb       	out	0x17, r24	; 23
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
	for(b=0;b<=45;b++)
      {
		int first=b/10;
		int second=b%10;
		
        PORTB=0b11111111; 
  94:	0f ef       	ldi	r16, 0xFF	; 255
		PORTA=second;
        PORTB=0b11111110;   
  96:	ee ef       	ldi	r30, 0xFE	; 254
  98:	be 2e       	mov	r11, r30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	20 e6       	ldi	r18, 0x60	; 96
  9c:	3a ee       	ldi	r19, 0xEA	; 234
        _delay_ms(30);

		PORTB=0b11111111; 
		PORTA=first;
        PORTB=0b11111101;   
  9e:	7d ef       	ldi	r23, 0xFD	; 253
  a0:	c7 2e       	mov	r12, r23
        _delay_ms(30);
		
		PORTB=0b11111111; 
		PORTA=0;
        PORTB=0b11111011;   
  a2:	6b ef       	ldi	r22, 0xFB	; 251
  a4:	d6 2e       	mov	r13, r22
        _delay_ms(30);

		PORTB=0b11111111; 
		PORTA=2;
  a6:	52 e0       	ldi	r21, 0x02	; 2
  a8:	e5 2e       	mov	r14, r21
        PORTB=0b11110111;   
  aa:	47 ef       	ldi	r20, 0xF7	; 247
  ac:	f4 2e       	mov	r15, r20
  ae:	25 c0       	rjmp	.+74     	; 0xfa <main+0x7e>
	for(b=0;b<=45;b++)
      {
		int first=b/10;
		int second=b%10;
		
        PORTB=0b11111111; 
  b0:	08 bb       	out	0x18, r16	; 24
		PORTA=second;
  b2:	84 2f       	mov	r24, r20
  b4:	91 2f       	mov	r25, r17
  b6:	6a e0       	ldi	r22, 0x0A	; 10
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 87 00 	call	0x10e	; 0x10e <__divmodhi4>
  be:	8b bb       	out	0x1b, r24	; 27
        PORTB=0b11111110;   
  c0:	b8 ba       	out	0x18, r11	; 24
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x48>
        _delay_ms(30);

		PORTB=0b11111111; 
  c8:	08 bb       	out	0x18, r16	; 24
		PORTA=first;
  ca:	84 2f       	mov	r24, r20
  cc:	91 2f       	mov	r25, r17
  ce:	6a e0       	ldi	r22, 0x0A	; 10
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 87 00 	call	0x10e	; 0x10e <__divmodhi4>
  d6:	6b bb       	out	0x1b, r22	; 27
        PORTB=0b11111101;   
  d8:	c8 ba       	out	0x18, r12	; 24
  da:	c9 01       	movw	r24, r18
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x60>
        _delay_ms(30);
		
		PORTB=0b11111111; 
  e0:	08 bb       	out	0x18, r16	; 24
		PORTA=0;
  e2:	1b ba       	out	0x1b, r1	; 27
        PORTB=0b11111011;   
  e4:	d8 ba       	out	0x18, r13	; 24
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x6c>
        _delay_ms(30);

		PORTB=0b11111111; 
  ec:	08 bb       	out	0x18, r16	; 24
		PORTA=2;
  ee:	eb ba       	out	0x1b, r14	; 27
        PORTB=0b11110111;   
  f0:	f8 ba       	out	0x18, r15	; 24
  f2:	c9 01       	movw	r24, r18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x78>
  f8:	cf 01       	movw	r24, r30
  fa:	48 2f       	mov	r20, r24
  fc:	19 2f       	mov	r17, r25
  fe:	fc 01       	movw	r30, r24
 100:	31 96       	adiw	r30, 0x01	; 1
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
		DDRB=0b11111111;
  
  while(1){
  
	
	for(b=0;b<=45;b++)
 106:	ef 32       	cpi	r30, 0x2F	; 47
 108:	f1 05       	cpc	r31, r1
 10a:	b9 f3       	breq	.-18     	; 0xfa <main+0x7e>
 10c:	d1 cf       	rjmp	.-94     	; 0xb0 <main+0x34>

0000010e <__divmodhi4>:
 10e:	97 fb       	bst	r25, 7
 110:	09 2e       	mov	r0, r25
 112:	07 26       	eor	r0, r23
 114:	0a d0       	rcall	.+20     	; 0x12a <__divmodhi4_neg1>
 116:	77 fd       	sbrc	r23, 7
 118:	04 d0       	rcall	.+8      	; 0x122 <__divmodhi4_neg2>
 11a:	0c d0       	rcall	.+24     	; 0x134 <__udivmodhi4>
 11c:	06 d0       	rcall	.+12     	; 0x12a <__divmodhi4_neg1>
 11e:	00 20       	and	r0, r0
 120:	1a f4       	brpl	.+6      	; 0x128 <__divmodhi4_exit>

00000122 <__divmodhi4_neg2>:
 122:	70 95       	com	r23
 124:	61 95       	neg	r22
 126:	7f 4f       	sbci	r23, 0xFF	; 255

00000128 <__divmodhi4_exit>:
 128:	08 95       	ret

0000012a <__divmodhi4_neg1>:
 12a:	f6 f7       	brtc	.-4      	; 0x128 <__divmodhi4_exit>
 12c:	90 95       	com	r25
 12e:	81 95       	neg	r24
 130:	9f 4f       	sbci	r25, 0xFF	; 255
 132:	08 95       	ret

00000134 <__udivmodhi4>:
 134:	aa 1b       	sub	r26, r26
 136:	bb 1b       	sub	r27, r27
 138:	51 e1       	ldi	r21, 0x11	; 17
 13a:	07 c0       	rjmp	.+14     	; 0x14a <__udivmodhi4_ep>

0000013c <__udivmodhi4_loop>:
 13c:	aa 1f       	adc	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	a6 17       	cp	r26, r22
 142:	b7 07       	cpc	r27, r23
 144:	10 f0       	brcs	.+4      	; 0x14a <__udivmodhi4_ep>
 146:	a6 1b       	sub	r26, r22
 148:	b7 0b       	sbc	r27, r23

0000014a <__udivmodhi4_ep>:
 14a:	88 1f       	adc	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	5a 95       	dec	r21
 150:	a9 f7       	brne	.-22     	; 0x13c <__udivmodhi4_loop>
 152:	80 95       	com	r24
 154:	90 95       	com	r25
 156:	bc 01       	movw	r22, r24
 158:	cd 01       	movw	r24, r26
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
