
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000031  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024e  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000103  00000000  00000000  00000461  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ad  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000088  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <split>:

int split(int number){
		int a=number%10;
		int temp=number/10;

}
  6c:	08 95       	ret

0000006e <display>:


void display(int number){
  6e:	1f 93       	push	r17
  70:	9c 01       	movw	r18, r24

		int first=number%10;
		int temp=number/10;
  72:	6a e0       	ldi	r22, 0x0A	; 10
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  7a:	46 2f       	mov	r20, r22
  7c:	e7 2f       	mov	r30, r23
		int second=temp%10;
		temp=temp/10;
  7e:	86 2f       	mov	r24, r22
  80:	97 2f       	mov	r25, r23
  82:	6a e0       	ldi	r22, 0x0A	; 10
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  8a:	f6 2f       	mov	r31, r22
  8c:	17 2f       	mov	r17, r23
		int third=temp%10;
		temp=temp/10;
		int frth=temp%10;
		
        PORTA=(first|0b11110000); 
  8e:	c9 01       	movw	r24, r18
  90:	6a e0       	ldi	r22, 0x0A	; 10
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	8b bb       	out	0x1b, r24	; 27
        PORTA&=~(1<<4);   
  9c:	dc 98       	cbi	0x1b, 4	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e3       	ldi	r18, 0x30	; 48
  a0:	35 e7       	ldi	r19, 0x75	; 117
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <display+0x36>
        _delay_ms(15);
		
		PORTA=(second|0b11110000); 
  a8:	84 2f       	mov	r24, r20
  aa:	9e 2f       	mov	r25, r30
  ac:	6a e0       	ldi	r22, 0x0A	; 10
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  b4:	80 6f       	ori	r24, 0xF0	; 240
  b6:	8b bb       	out	0x1b, r24	; 27
        PORTA&=~(1<<5);   
  b8:	dd 98       	cbi	0x1b, 5	; 27
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <display+0x4e>
        _delay_ms(15);
		
		PORTA=(third|0b11110000); 
  c0:	8f 2f       	mov	r24, r31
  c2:	91 2f       	mov	r25, r17
  c4:	6a e0       	ldi	r22, 0x0A	; 10
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  cc:	80 6f       	ori	r24, 0xF0	; 240
  ce:	8b bb       	out	0x1b, r24	; 27
        PORTA&=~(1<<6);   
  d0:	de 98       	cbi	0x1b, 6	; 27
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <display+0x66>
        _delay_ms(15);
		
		PORTA=(frth|0b11110000); 
  d8:	8f 2f       	mov	r24, r31
  da:	91 2f       	mov	r25, r17
  dc:	6a e0       	ldi	r22, 0x0A	; 10
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  e4:	cb 01       	movw	r24, r22
  e6:	6a e0       	ldi	r22, 0x0A	; 10
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8b bb       	out	0x1b, r24	; 27
        PORTA&=~(1<<7);   
  f2:	df 98       	cbi	0x1b, 7	; 27
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <display+0x88>
        _delay_ms(15);


}
  fa:	1f 91       	pop	r17
  fc:	08 95       	ret

000000fe <main>:

void main()
  {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
		DDRA=0b11111111;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a bb       	out	0x1a, r24	; 26
		DDRB=0b11111111;
 106:	87 bb       	out	0x17, r24	; 23
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(1){
  
		for(int i=0;i<=100;i++){
		display(i);}
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 37 00 	call	0x6e	; 0x6e <display>
		DDRA=0b11111111;
		DDRB=0b11111111;
  
  while(1){
  
		for(int i=0;i<=100;i++){
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	c5 36       	cpi	r28, 0x65	; 101
 116:	d1 05       	cpc	r29, r1
 118:	bc f7       	brge	.-18     	; 0x108 <main+0xa>
 11a:	f8 cf       	rjmp	.-16     	; 0x10c <main+0xe>

0000011c <__divmodhi4>:
 11c:	97 fb       	bst	r25, 7
 11e:	09 2e       	mov	r0, r25
 120:	07 26       	eor	r0, r23
 122:	0a d0       	rcall	.+20     	; 0x138 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	04 d0       	rcall	.+8      	; 0x130 <__divmodhi4_neg2>
 128:	0c d0       	rcall	.+24     	; 0x142 <__udivmodhi4>
 12a:	06 d0       	rcall	.+12     	; 0x138 <__divmodhi4_neg1>
 12c:	00 20       	and	r0, r0
 12e:	1a f4       	brpl	.+6      	; 0x136 <__divmodhi4_exit>

00000130 <__divmodhi4_neg2>:
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255

00000136 <__divmodhi4_exit>:
 136:	08 95       	ret

00000138 <__divmodhi4_neg1>:
 138:	f6 f7       	brtc	.-4      	; 0x136 <__divmodhi4_exit>
 13a:	90 95       	com	r25
 13c:	81 95       	neg	r24
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
