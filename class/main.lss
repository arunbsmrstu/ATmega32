
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004d  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ea  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b2  00000000  00000000  0000052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002e0  00000000  00000000  000006df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c5  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d0  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include<util/delay.h>
#define setBit(p,n)(p|=1<<n)
#define clearBit(p,n)(p&=~(1<<n))


int main(){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29

	DDRB=DDRB|0b11111111;
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 bb       	out	0x17, r24	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	c8 ec       	ldi	r28, 0xC8	; 200
  ca:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		top_to_down();
  cc:	0e 94 79 00 	call	0xf2	; 0xf2 <top_to_down>
  d0:	88 e8       	ldi	r24, 0x88	; 136
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	fe 01       	movw	r30, r28
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d9 f7       	brne	.-10     	; 0xd4 <main+0x16>
		_delay_ms(500);
		down_to_top();
  de:	0e 94 94 00 	call	0x128	; 0x128 <down_to_top>
  e2:	88 e8       	ldi	r24, 0x88	; 136
  e4:	93 e1       	ldi	r25, 0x13	; 19
  e6:	fe 01       	movw	r30, r28
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x28>
  f0:	ed cf       	rjmp	.-38     	; 0xcc <main+0xe>

000000f2 <top_to_down>:
#include<avr/io.h>
#include<util/delay.h>

void top_to_down(){
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0

	for(int i=0;i<=7;i++)
			{
			
				PORTB=1<<i;
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	48 ec       	ldi	r20, 0xC8	; 200
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	cb 01       	movw	r24, r22
 100:	02 2e       	mov	r0, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <top_to_down+0x16>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <top_to_down+0x12>
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	88 e8       	ldi	r24, 0x88	; 136
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	fa 01       	movw	r30, r20
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <top_to_down+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <top_to_down+0x20>
#include<avr/io.h>
#include<util/delay.h>

void top_to_down(){

	for(int i=0;i<=7;i++)
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	28 30       	cpi	r18, 0x08	; 8
 122:	31 05       	cpc	r19, r1
 124:	61 f7       	brne	.-40     	; 0xfe <top_to_down+0xc>
				PORTB=1<<i;
				_delay_ms(500);
			}
	
	
}
 126:	08 95       	ret

00000128 <down_to_top>:

void down_to_top(){
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0

	for(int i=0;i<=7;i++)
			{
			
				PORTB=0b10000000>>i;
 12c:	60 e8       	ldi	r22, 0x80	; 128
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	48 ec       	ldi	r20, 0xC8	; 200
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	cb 01       	movw	r24, r22
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <down_to_top+0x16>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <down_to_top+0x12>
 142:	88 bb       	out	0x18, r24	; 24
 144:	88 e8       	ldi	r24, 0x88	; 136
 146:	93 e1       	ldi	r25, 0x13	; 19
 148:	fa 01       	movw	r30, r20
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <down_to_top+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <down_to_top+0x20>
	
}

void down_to_top(){

	for(int i=0;i<=7;i++)
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	31 05       	cpc	r19, r1
 15a:	61 f7       	brne	.-40     	; 0x134 <down_to_top+0xc>
				PORTB=0b10000000>>i;
				_delay_ms(500);
			}


 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
