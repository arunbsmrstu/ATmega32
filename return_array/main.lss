
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005bc  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000033  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000030d  00000000  00000000  00000685  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016c  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b9  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ce  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000218  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  7a:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Seven_segment>:
#include<seven_segment.h>
#include <util/delay.h>

int d=5;

int *Seven_segment( int number){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	28 97       	sbiw	r28, 0x08	; 8
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	05 c0       	rjmp	.+10     	; 0xa2 <Seven_segment+0x20>
		unsigned int split_number[4]={0,0,0,0};
		
		int n=4;
		while(number!=0){
			split_number[n-1]=number%10;
			number=number/10;
  98:	6a e0       	ldi	r22, 0x0A	; 10
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 b5 02 	call	0x56a	; 0x56a <__divmodhi4>
  a0:	cb 01       	movw	r24, r22
int *Seven_segment( int number){

		unsigned int split_number[4]={0,0,0,0};
		
		int n=4;
		while(number!=0){
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	c9 f7       	brne	.-14     	; 0x98 <Seven_segment+0x16>
		
        return 	(split_number);	
		
		

}
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	28 96       	adiw	r28, 0x08	; 8
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <main>:





void main(){
  bc:	6f 92       	push	r6
  be:	7f 92       	push	r7
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29

			DDRC=0b11111111;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	88 24       	eor	r8, r8
  de:	99 24       	eor	r9, r9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	88 ec       	ldi	r24, 0xC8	; 200
  e2:	68 2e       	mov	r6, r24
  e4:	71 2c       	mov	r7, r1
			
			while(1){
			
				for(int i=0;i<=100;i++){
				int *numbers=Seven_segment(i);
  e6:	c4 01       	movw	r24, r8
  e8:	0e 94 41 00 	call	0x82	; 0x82 <Seven_segment>
  ec:	ec 01       	movw	r28, r24
				
					
		        PORTC=(numbers[4-1]|0b11110000); 
  ee:	8e 81       	ldd	r24, Y+6	; 0x06
  f0:	80 6f       	ori	r24, 0xF0	; 240
  f2:	85 bb       	out	0x15, r24	; 21
                PORTC&=~(1<<4);   
  f4:	ac 98       	cbi	0x15, 4	; 21
                _delay_ms(d);
  f6:	60 91 60 00 	lds	r22, 0x0060
  fa:	70 91 61 00 	lds	r23, 0x0061
  fe:	88 27       	eor	r24, r24
 100:	77 fd       	sbrc	r23, 7
 102:	80 95       	com	r24
 104:	98 2f       	mov	r25, r24
 106:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
 10a:	5b 01       	movw	r10, r22
 10c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	4a ef       	ldi	r20, 0xFA	; 250
 114:	54 e4       	ldi	r21, 0x44	; 68
 116:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 11a:	7b 01       	movw	r14, r22
 11c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__cmpsf2>
 12a:	88 23       	and	r24, r24
 12c:	1c f4       	brge	.+6      	; 0x134 <main+0x78>
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	22 c0       	rjmp	.+68     	; 0x178 <main+0xbc>
		__ticks = 1;
	else if (__tmp > 65535)
 134:	c8 01       	movw	r24, r16
 136:	b7 01       	movw	r22, r14
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	4f e7       	ldi	r20, 0x7F	; 127
 13e:	57 e4       	ldi	r21, 0x47	; 71
 140:	0e 94 26 02 	call	0x44c	; 0x44c <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	a4 f4       	brge	.+40     	; 0x170 <main+0xb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 148:	c6 01       	movw	r24, r12
 14a:	b5 01       	movw	r22, r10
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e4       	ldi	r21, 0x41	; 65
 154:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 158:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 15c:	05 c0       	rjmp	.+10     	; 0x168 <main+0xac>
 15e:	c3 01       	movw	r24, r6
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xa4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	61 50       	subi	r22, 0x01	; 1
 166:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 168:	61 15       	cp	r22, r1
 16a:	71 05       	cpc	r23, r1
 16c:	c1 f7       	brne	.-16     	; 0x15e <main+0xa2>
 16e:	07 c0       	rjmp	.+14     	; 0x17e <main+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 170:	c8 01       	movw	r24, r16
 172:	b7 01       	movw	r22, r14
 174:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 178:	cb 01       	movw	r24, r22
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xbe>
		
		        PORTC=(numbers[4-2]|0b11110000); 
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	80 6f       	ori	r24, 0xF0	; 240
 182:	85 bb       	out	0x15, r24	; 21
                PORTC&=~(1<<5);   
 184:	ad 98       	cbi	0x15, 5	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 186:	c8 01       	movw	r24, r16
 188:	b7 01       	movw	r22, r14
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e8       	ldi	r20, 0x80	; 128
 190:	5f e3       	ldi	r21, 0x3F	; 63
 192:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__cmpsf2>
 196:	88 23       	and	r24, r24
 198:	1c f4       	brge	.+6      	; 0x1a0 <main+0xe4>
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	22 c0       	rjmp	.+68     	; 0x1e4 <main+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
 1a0:	c8 01       	movw	r24, r16
 1a2:	b7 01       	movw	r22, r14
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	3f ef       	ldi	r19, 0xFF	; 255
 1a8:	4f e7       	ldi	r20, 0x7F	; 127
 1aa:	57 e4       	ldi	r21, 0x47	; 71
 1ac:	0e 94 26 02 	call	0x44c	; 0x44c <__gesf2>
 1b0:	18 16       	cp	r1, r24
 1b2:	a4 f4       	brge	.+40     	; 0x1dc <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b4:	c6 01       	movw	r24, r12
 1b6:	b5 01       	movw	r22, r10
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e2       	ldi	r20, 0x20	; 32
 1be:	51 e4       	ldi	r21, 0x41	; 65
 1c0:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 1c4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <main+0x118>
 1ca:	c3 01       	movw	r24, r6
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x110>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	61 50       	subi	r22, 0x01	; 1
 1d2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	61 15       	cp	r22, r1
 1d6:	71 05       	cpc	r23, r1
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <main+0x10e>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1dc:	c8 01       	movw	r24, r16
 1de:	b7 01       	movw	r22, r14
 1e0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 1e4:	cb 01       	movw	r24, r22
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x12a>
                _delay_ms(d);
		
		        PORTC=(numbers[4-3]|0b11110000); 
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	80 6f       	ori	r24, 0xF0	; 240
 1ee:	85 bb       	out	0x15, r24	; 21
                PORTC&=~(1<<6);   
 1f0:	ae 98       	cbi	0x15, 6	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1f2:	c8 01       	movw	r24, r16
 1f4:	b7 01       	movw	r22, r14
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e8       	ldi	r20, 0x80	; 128
 1fc:	5f e3       	ldi	r21, 0x3F	; 63
 1fe:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__cmpsf2>
 202:	88 23       	and	r24, r24
 204:	1c f4       	brge	.+6      	; 0x20c <main+0x150>
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	22 c0       	rjmp	.+68     	; 0x250 <main+0x194>
		__ticks = 1;
	else if (__tmp > 65535)
 20c:	c8 01       	movw	r24, r16
 20e:	b7 01       	movw	r22, r14
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	3f ef       	ldi	r19, 0xFF	; 255
 214:	4f e7       	ldi	r20, 0x7F	; 127
 216:	57 e4       	ldi	r21, 0x47	; 71
 218:	0e 94 26 02 	call	0x44c	; 0x44c <__gesf2>
 21c:	18 16       	cp	r1, r24
 21e:	a4 f4       	brge	.+40     	; 0x248 <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 220:	c6 01       	movw	r24, r12
 222:	b5 01       	movw	r22, r10
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e2       	ldi	r20, 0x20	; 32
 22a:	51 e4       	ldi	r21, 0x41	; 65
 22c:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 230:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 234:	05 c0       	rjmp	.+10     	; 0x240 <main+0x184>
 236:	c3 01       	movw	r24, r6
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x17c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23c:	61 50       	subi	r22, 0x01	; 1
 23e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	61 15       	cp	r22, r1
 242:	71 05       	cpc	r23, r1
 244:	c1 f7       	brne	.-16     	; 0x236 <main+0x17a>
 246:	07 c0       	rjmp	.+14     	; 0x256 <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 248:	c8 01       	movw	r24, r16
 24a:	b7 01       	movw	r22, r14
 24c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 250:	cb 01       	movw	r24, r22
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x196>
                _delay_ms(d);
		
		        PORTC=(numbers[4-4]|0b11110000); 
 256:	88 81       	ld	r24, Y
 258:	80 6f       	ori	r24, 0xF0	; 240
 25a:	85 bb       	out	0x15, r24	; 21
                PORTC&=~(1<<7);   
 25c:	af 98       	cbi	0x15, 7	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 25e:	c8 01       	movw	r24, r16
 260:	b7 01       	movw	r22, r14
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e8       	ldi	r20, 0x80	; 128
 268:	5f e3       	ldi	r21, 0x3F	; 63
 26a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__cmpsf2>
 26e:	88 23       	and	r24, r24
 270:	1c f4       	brge	.+6      	; 0x278 <main+0x1bc>
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	22 c0       	rjmp	.+68     	; 0x2bc <main+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
 278:	c8 01       	movw	r24, r16
 27a:	b7 01       	movw	r22, r14
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	3f ef       	ldi	r19, 0xFF	; 255
 280:	4f e7       	ldi	r20, 0x7F	; 127
 282:	57 e4       	ldi	r21, 0x47	; 71
 284:	0e 94 26 02 	call	0x44c	; 0x44c <__gesf2>
 288:	18 16       	cp	r1, r24
 28a:	a4 f4       	brge	.+40     	; 0x2b4 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28c:	c6 01       	movw	r24, r12
 28e:	b5 01       	movw	r22, r10
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e2       	ldi	r20, 0x20	; 32
 296:	51 e4       	ldi	r21, 0x41	; 65
 298:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 29c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <main+0x1f0>
 2a2:	c3 01       	movw	r24, r6
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x1e8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a8:	61 50       	subi	r22, 0x01	; 1
 2aa:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ac:	61 15       	cp	r22, r1
 2ae:	71 05       	cpc	r23, r1
 2b0:	c1 f7       	brne	.-16     	; 0x2a2 <main+0x1e6>
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b4:	c8 01       	movw	r24, r16
 2b6:	b7 01       	movw	r22, r14
 2b8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 2bc:	cb 01       	movw	r24, r22
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x202>

			DDRC=0b11111111;
			
			while(1){
			
				for(int i=0;i<=100;i++){
 2c2:	08 94       	sec
 2c4:	81 1c       	adc	r8, r1
 2c6:	91 1c       	adc	r9, r1
 2c8:	85 e6       	ldi	r24, 0x65	; 101
 2ca:	88 16       	cp	r8, r24
 2cc:	91 04       	cpc	r9, r1
 2ce:	0c f4       	brge	.+2      	; 0x2d2 <main+0x216>
 2d0:	0a cf       	rjmp	.-492    	; 0xe6 <main+0x2a>
 2d2:	88 24       	eor	r8, r8
 2d4:	99 24       	eor	r9, r9
 2d6:	07 cf       	rjmp	.-498    	; 0xe6 <main+0x2a>

000002d8 <__cmpsf2>:
 2d8:	6c d0       	rcall	.+216    	; 0x3b2 <__fp_cmp>
 2da:	08 f4       	brcc	.+2      	; 0x2de <__cmpsf2+0x6>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	08 95       	ret

000002e0 <__fixunssfsi>:
 2e0:	94 d0       	rcall	.+296    	; 0x40a <__fp_splitA>
 2e2:	88 f0       	brcs	.+34     	; 0x306 <__fixunssfsi+0x26>
 2e4:	9f 57       	subi	r25, 0x7F	; 127
 2e6:	90 f0       	brcs	.+36     	; 0x30c <__fixunssfsi+0x2c>
 2e8:	b9 2f       	mov	r27, r25
 2ea:	99 27       	eor	r25, r25
 2ec:	b7 51       	subi	r27, 0x17	; 23
 2ee:	a0 f0       	brcs	.+40     	; 0x318 <__fixunssfsi+0x38>
 2f0:	d1 f0       	breq	.+52     	; 0x326 <__fixunssfsi+0x46>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	88 1f       	adc	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	1a f0       	brmi	.+6      	; 0x302 <__fixunssfsi+0x22>
 2fc:	ba 95       	dec	r27
 2fe:	c9 f7       	brne	.-14     	; 0x2f2 <__fixunssfsi+0x12>
 300:	12 c0       	rjmp	.+36     	; 0x326 <__fixunssfsi+0x46>
 302:	b1 30       	cpi	r27, 0x01	; 1
 304:	81 f0       	breq	.+32     	; 0x326 <__fixunssfsi+0x46>
 306:	9b d0       	rcall	.+310    	; 0x43e <__fp_zero>
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	08 95       	ret
 30c:	98 c0       	rjmp	.+304    	; 0x43e <__fp_zero>
 30e:	67 2f       	mov	r22, r23
 310:	78 2f       	mov	r23, r24
 312:	88 27       	eor	r24, r24
 314:	b8 5f       	subi	r27, 0xF8	; 248
 316:	39 f0       	breq	.+14     	; 0x326 <__fixunssfsi+0x46>
 318:	b9 3f       	cpi	r27, 0xF9	; 249
 31a:	cc f3       	brlt	.-14     	; 0x30e <__fixunssfsi+0x2e>
 31c:	86 95       	lsr	r24
 31e:	77 95       	ror	r23
 320:	67 95       	ror	r22
 322:	b3 95       	inc	r27
 324:	d9 f7       	brne	.-10     	; 0x31c <__fixunssfsi+0x3c>
 326:	3e f4       	brtc	.+14     	; 0x336 <__fixunssfsi+0x56>
 328:	90 95       	com	r25
 32a:	80 95       	com	r24
 32c:	70 95       	com	r23
 32e:	61 95       	neg	r22
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	08 95       	ret

00000338 <__floatunsisf>:
 338:	e8 94       	clt
 33a:	09 c0       	rjmp	.+18     	; 0x34e <__floatsisf+0x12>

0000033c <__floatsisf>:
 33c:	97 fb       	bst	r25, 7
 33e:	3e f4       	brtc	.+14     	; 0x34e <__floatsisf+0x12>
 340:	90 95       	com	r25
 342:	80 95       	com	r24
 344:	70 95       	com	r23
 346:	61 95       	neg	r22
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	8f 4f       	sbci	r24, 0xFF	; 255
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	99 23       	and	r25, r25
 350:	a9 f0       	breq	.+42     	; 0x37c <__floatsisf+0x40>
 352:	f9 2f       	mov	r31, r25
 354:	96 e9       	ldi	r25, 0x96	; 150
 356:	bb 27       	eor	r27, r27
 358:	93 95       	inc	r25
 35a:	f6 95       	lsr	r31
 35c:	87 95       	ror	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b7 95       	ror	r27
 364:	f1 11       	cpse	r31, r1
 366:	f8 cf       	rjmp	.-16     	; 0x358 <__floatsisf+0x1c>
 368:	fa f4       	brpl	.+62     	; 0x3a8 <__floatsisf+0x6c>
 36a:	bb 0f       	add	r27, r27
 36c:	11 f4       	brne	.+4      	; 0x372 <__floatsisf+0x36>
 36e:	60 ff       	sbrs	r22, 0
 370:	1b c0       	rjmp	.+54     	; 0x3a8 <__floatsisf+0x6c>
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <__floatsisf+0x6c>
 37c:	88 23       	and	r24, r24
 37e:	11 f0       	breq	.+4      	; 0x384 <__floatsisf+0x48>
 380:	96 e9       	ldi	r25, 0x96	; 150
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <__floatsisf+0x6a>
 384:	77 23       	and	r23, r23
 386:	21 f0       	breq	.+8      	; 0x390 <__floatsisf+0x54>
 388:	9e e8       	ldi	r25, 0x8E	; 142
 38a:	87 2f       	mov	r24, r23
 38c:	76 2f       	mov	r23, r22
 38e:	05 c0       	rjmp	.+10     	; 0x39a <__floatsisf+0x5e>
 390:	66 23       	and	r22, r22
 392:	71 f0       	breq	.+28     	; 0x3b0 <__floatsisf+0x74>
 394:	96 e8       	ldi	r25, 0x86	; 134
 396:	86 2f       	mov	r24, r22
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	2a f0       	brmi	.+10     	; 0x3a8 <__floatsisf+0x6c>
 39e:	9a 95       	dec	r25
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	da f7       	brpl	.-10     	; 0x39e <__floatsisf+0x62>
 3a8:	88 0f       	add	r24, r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	97 f9       	bld	r25, 7
 3b0:	08 95       	ret

000003b2 <__fp_cmp>:
 3b2:	99 0f       	add	r25, r25
 3b4:	00 08       	sbc	r0, r0
 3b6:	55 0f       	add	r21, r21
 3b8:	aa 0b       	sbc	r26, r26
 3ba:	e0 e8       	ldi	r30, 0x80	; 128
 3bc:	fe ef       	ldi	r31, 0xFE	; 254
 3be:	16 16       	cp	r1, r22
 3c0:	17 06       	cpc	r1, r23
 3c2:	e8 07       	cpc	r30, r24
 3c4:	f9 07       	cpc	r31, r25
 3c6:	c0 f0       	brcs	.+48     	; 0x3f8 <__fp_cmp+0x46>
 3c8:	12 16       	cp	r1, r18
 3ca:	13 06       	cpc	r1, r19
 3cc:	e4 07       	cpc	r30, r20
 3ce:	f5 07       	cpc	r31, r21
 3d0:	98 f0       	brcs	.+38     	; 0x3f8 <__fp_cmp+0x46>
 3d2:	62 1b       	sub	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	84 0b       	sbc	r24, r20
 3d8:	95 0b       	sbc	r25, r21
 3da:	39 f4       	brne	.+14     	; 0x3ea <__fp_cmp+0x38>
 3dc:	0a 26       	eor	r0, r26
 3de:	61 f0       	breq	.+24     	; 0x3f8 <__fp_cmp+0x46>
 3e0:	23 2b       	or	r18, r19
 3e2:	24 2b       	or	r18, r20
 3e4:	25 2b       	or	r18, r21
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <__fp_cmp+0x3e>
 3e8:	08 95       	ret
 3ea:	0a 26       	eor	r0, r26
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <__fp_cmp+0x3e>
 3ee:	a1 40       	sbci	r26, 0x01	; 1
 3f0:	a6 95       	lsr	r26
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	81 1d       	adc	r24, r1
 3f6:	81 1d       	adc	r24, r1
 3f8:	08 95       	ret

000003fa <__fp_split3>:
 3fa:	57 fd       	sbrc	r21, 7
 3fc:	90 58       	subi	r25, 0x80	; 128
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	59 f0       	breq	.+22     	; 0x41a <__fp_splitA+0x10>
 404:	5f 3f       	cpi	r21, 0xFF	; 255
 406:	71 f0       	breq	.+28     	; 0x424 <__fp_splitA+0x1a>
 408:	47 95       	ror	r20

0000040a <__fp_splitA>:
 40a:	88 0f       	add	r24, r24
 40c:	97 fb       	bst	r25, 7
 40e:	99 1f       	adc	r25, r25
 410:	61 f0       	breq	.+24     	; 0x42a <__fp_splitA+0x20>
 412:	9f 3f       	cpi	r25, 0xFF	; 255
 414:	79 f0       	breq	.+30     	; 0x434 <__fp_splitA+0x2a>
 416:	87 95       	ror	r24
 418:	08 95       	ret
 41a:	12 16       	cp	r1, r18
 41c:	13 06       	cpc	r1, r19
 41e:	14 06       	cpc	r1, r20
 420:	55 1f       	adc	r21, r21
 422:	f2 cf       	rjmp	.-28     	; 0x408 <__fp_split3+0xe>
 424:	46 95       	lsr	r20
 426:	f1 df       	rcall	.-30     	; 0x40a <__fp_splitA>
 428:	08 c0       	rjmp	.+16     	; 0x43a <__fp_splitA+0x30>
 42a:	16 16       	cp	r1, r22
 42c:	17 06       	cpc	r1, r23
 42e:	18 06       	cpc	r1, r24
 430:	99 1f       	adc	r25, r25
 432:	f1 cf       	rjmp	.-30     	; 0x416 <__fp_splitA+0xc>
 434:	86 95       	lsr	r24
 436:	71 05       	cpc	r23, r1
 438:	61 05       	cpc	r22, r1
 43a:	08 94       	sec
 43c:	08 95       	ret

0000043e <__fp_zero>:
 43e:	e8 94       	clt

00000440 <__fp_szero>:
 440:	bb 27       	eor	r27, r27
 442:	66 27       	eor	r22, r22
 444:	77 27       	eor	r23, r23
 446:	cb 01       	movw	r24, r22
 448:	97 f9       	bld	r25, 7
 44a:	08 95       	ret

0000044c <__gesf2>:
 44c:	b2 df       	rcall	.-156    	; 0x3b2 <__fp_cmp>
 44e:	08 f4       	brcc	.+2      	; 0x452 <__gesf2+0x6>
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	08 95       	ret

00000454 <__mulsf3>:
 454:	0b d0       	rcall	.+22     	; 0x46c <__mulsf3x>
 456:	78 c0       	rjmp	.+240    	; 0x548 <__fp_round>
 458:	69 d0       	rcall	.+210    	; 0x52c <__fp_pscA>
 45a:	28 f0       	brcs	.+10     	; 0x466 <__mulsf3+0x12>
 45c:	6e d0       	rcall	.+220    	; 0x53a <__fp_pscB>
 45e:	18 f0       	brcs	.+6      	; 0x466 <__mulsf3+0x12>
 460:	95 23       	and	r25, r21
 462:	09 f0       	breq	.+2      	; 0x466 <__mulsf3+0x12>
 464:	5a c0       	rjmp	.+180    	; 0x51a <__fp_inf>
 466:	5f c0       	rjmp	.+190    	; 0x526 <__fp_nan>
 468:	11 24       	eor	r1, r1
 46a:	ea cf       	rjmp	.-44     	; 0x440 <__fp_szero>

0000046c <__mulsf3x>:
 46c:	c6 df       	rcall	.-116    	; 0x3fa <__fp_split3>
 46e:	a0 f3       	brcs	.-24     	; 0x458 <__mulsf3+0x4>

00000470 <__mulsf3_pse>:
 470:	95 9f       	mul	r25, r21
 472:	d1 f3       	breq	.-12     	; 0x468 <__mulsf3+0x14>
 474:	95 0f       	add	r25, r21
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	55 1f       	adc	r21, r21
 47a:	62 9f       	mul	r22, r18
 47c:	f0 01       	movw	r30, r0
 47e:	72 9f       	mul	r23, r18
 480:	bb 27       	eor	r27, r27
 482:	f0 0d       	add	r31, r0
 484:	b1 1d       	adc	r27, r1
 486:	63 9f       	mul	r22, r19
 488:	aa 27       	eor	r26, r26
 48a:	f0 0d       	add	r31, r0
 48c:	b1 1d       	adc	r27, r1
 48e:	aa 1f       	adc	r26, r26
 490:	64 9f       	mul	r22, r20
 492:	66 27       	eor	r22, r22
 494:	b0 0d       	add	r27, r0
 496:	a1 1d       	adc	r26, r1
 498:	66 1f       	adc	r22, r22
 49a:	82 9f       	mul	r24, r18
 49c:	22 27       	eor	r18, r18
 49e:	b0 0d       	add	r27, r0
 4a0:	a1 1d       	adc	r26, r1
 4a2:	62 1f       	adc	r22, r18
 4a4:	73 9f       	mul	r23, r19
 4a6:	b0 0d       	add	r27, r0
 4a8:	a1 1d       	adc	r26, r1
 4aa:	62 1f       	adc	r22, r18
 4ac:	83 9f       	mul	r24, r19
 4ae:	a0 0d       	add	r26, r0
 4b0:	61 1d       	adc	r22, r1
 4b2:	22 1f       	adc	r18, r18
 4b4:	74 9f       	mul	r23, r20
 4b6:	33 27       	eor	r19, r19
 4b8:	a0 0d       	add	r26, r0
 4ba:	61 1d       	adc	r22, r1
 4bc:	23 1f       	adc	r18, r19
 4be:	84 9f       	mul	r24, r20
 4c0:	60 0d       	add	r22, r0
 4c2:	21 1d       	adc	r18, r1
 4c4:	82 2f       	mov	r24, r18
 4c6:	76 2f       	mov	r23, r22
 4c8:	6a 2f       	mov	r22, r26
 4ca:	11 24       	eor	r1, r1
 4cc:	9f 57       	subi	r25, 0x7F	; 127
 4ce:	50 40       	sbci	r21, 0x00	; 0
 4d0:	8a f0       	brmi	.+34     	; 0x4f4 <__mulsf3_pse+0x84>
 4d2:	e1 f0       	breq	.+56     	; 0x50c <__mulsf3_pse+0x9c>
 4d4:	88 23       	and	r24, r24
 4d6:	4a f0       	brmi	.+18     	; 0x4ea <__mulsf3_pse+0x7a>
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	bb 1f       	adc	r27, r27
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <__mulsf3_pse+0x64>
 4ea:	9e 3f       	cpi	r25, 0xFE	; 254
 4ec:	51 05       	cpc	r21, r1
 4ee:	70 f0       	brcs	.+28     	; 0x50c <__mulsf3_pse+0x9c>
 4f0:	14 c0       	rjmp	.+40     	; 0x51a <__fp_inf>
 4f2:	a6 cf       	rjmp	.-180    	; 0x440 <__fp_szero>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	ec f3       	brlt	.-6      	; 0x4f2 <__mulsf3_pse+0x82>
 4f8:	98 3e       	cpi	r25, 0xE8	; 232
 4fa:	dc f3       	brlt	.-10     	; 0x4f2 <__mulsf3_pse+0x82>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f7 95       	ror	r31
 506:	e7 95       	ror	r30
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	c1 f7       	brne	.-16     	; 0x4fc <__mulsf3_pse+0x8c>
 50c:	fe 2b       	or	r31, r30
 50e:	88 0f       	add	r24, r24
 510:	91 1d       	adc	r25, r1
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	97 f9       	bld	r25, 7
 518:	08 95       	ret

0000051a <__fp_inf>:
 51a:	97 f9       	bld	r25, 7
 51c:	9f 67       	ori	r25, 0x7F	; 127
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	08 95       	ret

00000526 <__fp_nan>:
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	08 95       	ret

0000052c <__fp_pscA>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	18 06       	cpc	r1, r24
 536:	09 06       	cpc	r0, r25
 538:	08 95       	ret

0000053a <__fp_pscB>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	05 06       	cpc	r0, r21
 546:	08 95       	ret

00000548 <__fp_round>:
 548:	09 2e       	mov	r0, r25
 54a:	03 94       	inc	r0
 54c:	00 0c       	add	r0, r0
 54e:	11 f4       	brne	.+4      	; 0x554 <__fp_round+0xc>
 550:	88 23       	and	r24, r24
 552:	52 f0       	brmi	.+20     	; 0x568 <__fp_round+0x20>
 554:	bb 0f       	add	r27, r27
 556:	40 f4       	brcc	.+16     	; 0x568 <__fp_round+0x20>
 558:	bf 2b       	or	r27, r31
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0x18>
 55c:	60 ff       	sbrs	r22, 0
 55e:	04 c0       	rjmp	.+8      	; 0x568 <__fp_round+0x20>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__divmodhi4>:
 56a:	97 fb       	bst	r25, 7
 56c:	09 2e       	mov	r0, r25
 56e:	07 26       	eor	r0, r23
 570:	0a d0       	rcall	.+20     	; 0x586 <__divmodhi4_neg1>
 572:	77 fd       	sbrc	r23, 7
 574:	04 d0       	rcall	.+8      	; 0x57e <__divmodhi4_neg2>
 576:	0c d0       	rcall	.+24     	; 0x590 <__udivmodhi4>
 578:	06 d0       	rcall	.+12     	; 0x586 <__divmodhi4_neg1>
 57a:	00 20       	and	r0, r0
 57c:	1a f4       	brpl	.+6      	; 0x584 <__divmodhi4_exit>

0000057e <__divmodhi4_neg2>:
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255

00000584 <__divmodhi4_exit>:
 584:	08 95       	ret

00000586 <__divmodhi4_neg1>:
 586:	f6 f7       	brtc	.-4      	; 0x584 <__divmodhi4_exit>
 588:	90 95       	com	r25
 58a:	81 95       	neg	r24
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__udivmodhi4>:
 590:	aa 1b       	sub	r26, r26
 592:	bb 1b       	sub	r27, r27
 594:	51 e1       	ldi	r21, 0x11	; 17
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <__udivmodhi4_ep>

00000598 <__udivmodhi4_loop>:
 598:	aa 1f       	adc	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	a6 17       	cp	r26, r22
 59e:	b7 07       	cpc	r27, r23
 5a0:	10 f0       	brcs	.+4      	; 0x5a6 <__udivmodhi4_ep>
 5a2:	a6 1b       	sub	r26, r22
 5a4:	b7 0b       	sbc	r27, r23

000005a6 <__udivmodhi4_ep>:
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	5a 95       	dec	r21
 5ac:	a9 f7       	brne	.-22     	; 0x598 <__udivmodhi4_loop>
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	bc 01       	movw	r22, r24
 5b4:	cd 01       	movw	r24, r26
 5b6:	08 95       	ret

000005b8 <_exit>:
 5b8:	f8 94       	cli

000005ba <__stop_program>:
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <__stop_program>
