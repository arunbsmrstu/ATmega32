
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ac  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000102  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000211  00000000  00000000  00000541  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a6  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a0  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){

	DDRB=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	
	
	while(1){
	    PORTB=0b00000001;
  70:	a1 e0       	ldi	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  72:	48 ec       	ldi	r20, 0xC8	; 200
  74:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		for(int i=1;i<=8;i++){
			PORTB=PORTB<<1;
			_delay_ms(500);
		}
		PORTB=0b11111111;
  76:	6f ef       	ldi	r22, 0xFF	; 255
		_delay_ms(500);
		PORTB=0b10000000;
  78:	70 e8       	ldi	r23, 0x80	; 128

	DDRB=0b11111111;
	
	
	while(1){
	    PORTB=0b00000001;
  7a:	a8 bb       	out	0x18, r26	; 24
  7c:	88 e8       	ldi	r24, 0x88	; 136
  7e:	93 e1       	ldi	r25, 0x13	; 19
  80:	fa 01       	movw	r30, r20
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  88:	d9 f7       	brne	.-10     	; 0x80 <main+0x14>
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(500);
		for(int i=1;i<=8;i++){
			PORTB=PORTB<<1;
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	88 0f       	add	r24, r24
  92:	88 bb       	out	0x18, r24	; 24
  94:	88 e8       	ldi	r24, 0x88	; 136
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	fa 01       	movw	r30, r20
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a0:	d9 f7       	brne	.-10     	; 0x98 <main+0x2c>
	
	
	while(1){
	    PORTB=0b00000001;
		_delay_ms(500);
		for(int i=1;i<=8;i++){
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	29 30       	cpi	r18, 0x09	; 9
  a8:	31 05       	cpc	r19, r1
  aa:	89 f7       	brne	.-30     	; 0x8e <main+0x22>
			PORTB=PORTB<<1;
			_delay_ms(500);
		}
		PORTB=0b11111111;
  ac:	68 bb       	out	0x18, r22	; 24
  ae:	88 e8       	ldi	r24, 0x88	; 136
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	fa 01       	movw	r30, r20
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <main+0x46>
		_delay_ms(500);
		PORTB=0b10000000;
  bc:	78 bb       	out	0x18, r23	; 24
  be:	88 e8       	ldi	r24, 0x88	; 136
  c0:	93 e1       	ldi	r25, 0x13	; 19
  c2:	fa 01       	movw	r30, r20
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x56>
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(500);
		for(int i=1;i<=8;i++){
			PORTB=PORTB>>1;
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	86 95       	lsr	r24
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	88 e8       	ldi	r24, 0x88	; 136
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	fa 01       	movw	r30, r20
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x6e>
		}
		PORTB=0b11111111;
		_delay_ms(500);
		PORTB=0b10000000;
		_delay_ms(500);
		for(int i=1;i<=8;i++){
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	29 30       	cpi	r18, 0x09	; 9
  ea:	31 05       	cpc	r19, r1
  ec:	89 f7       	brne	.-30     	; 0xd0 <main+0x64>
			PORTB=PORTB>>1;
			_delay_ms(500);
		}
		PORTB=0b11111111;
  ee:	68 bb       	out	0x18, r22	; 24
  f0:	88 e8       	ldi	r24, 0x88	; 136
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	fa 01       	movw	r30, r20
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <main+0x88>
  fe:	bd cf       	rjmp	.-134    	; 0x7a <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
