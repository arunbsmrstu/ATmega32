
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000060  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000cd  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008e0  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002bf  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000064e  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018d  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000045a  00000000  00000000  00001d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <lcd.h>
#include <ADC.h>
int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
     LCDInit(0);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 bc 00 	call	0x178	; 0x178 <LCDInit>
     LCDClear();
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	c8 ea       	ldi	r28, 0xA8	; 168
  80:	d1 e6       	ldi	r29, 0x61	; 97
	 
	while(1){
			
			//LCDWriteString("Temp:");
			int sensor_reading = adc_read(0);   //reading analog data
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 ee 01 	call	0x3dc	; 0x3dc <adc_read>
			int r = (5*sensor_reading)/10.23;  //Convert data
            LCDWriteInt(r,4);                 //write Data On LCD
  8a:	9c 01       	movw	r18, r24
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	28 0f       	add	r18, r24
  96:	39 1f       	adc	r19, r25
  98:	44 27       	eor	r20, r20
  9a:	37 fd       	sbrc	r19, 7
  9c:	40 95       	com	r20
  9e:	54 2f       	mov	r21, r20
  a0:	ca 01       	movw	r24, r20
  a2:	b9 01       	movw	r22, r18
  a4:	0e 94 9c 02 	call	0x538	; 0x538 <__floatsisf>
  a8:	24 e1       	ldi	r18, 0x14	; 20
  aa:	3e ea       	ldi	r19, 0xAE	; 174
  ac:	43 e2       	ldi	r20, 0x23	; 35
  ae:	51 e4       	ldi	r21, 0x41	; 65
  b0:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3>
  b4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixsfsi>
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCDWriteInt>
  c4:	ce 01       	movw	r24, r28
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x5a>
	        //LCDWriteString(" C");
			_delay_ms(100);
			LCDClear();
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
  d2:	d7 cf       	rjmp	.-82     	; 0x82 <main+0x16>

000000d4 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
  da:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  dc:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDBusyLoop+0xc>


	do
	{

		SET_E();
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	94 9a       	sbi	0x12, 4	; 18
  e8:	82 2f       	mov	r24, r18
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  ee:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	92 2f       	mov	r25, r18
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  fa:	94 98       	cbi	0x12, 4	; 18
  fc:	92 2f       	mov	r25, r18
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 102:	94 9a       	sbi	0x12, 4	; 18
 104:	92 2f       	mov	r25, r18
 106:	9a 95       	dec	r25
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 10a:	90 b3       	in	r25, 0x10	; 16
 10c:	92 2f       	mov	r25, r18
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 112:	94 98       	cbi	0x12, 4	; 18
 114:	92 2f       	mov	r25, r18
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 11a:	87 fd       	sbrc	r24, 7
 11c:	e4 cf       	rjmp	.-56     	; 0xe6 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 11e:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 120:	81 b3       	in	r24, 0x11	; 17
 122:	8f 60       	ori	r24, 0x0F	; 15
 124:	81 bb       	out	0x11, r24	; 17

}
 126:	08 95       	ret

00000128 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 128:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 12a:	66 23       	and	r22, r22
 12c:	11 f4       	brne	.+4      	; 0x132 <LCDByte+0xa>
	CLEAR_RS();
 12e:	96 98       	cbi	0x12, 6	; 18
 130:	01 c0       	rjmp	.+2      	; 0x134 <LCDByte+0xc>
else
	SET_RS();
 132:	96 9a       	sbi	0x12, 6	; 18
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	82 2f       	mov	r24, r18
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 13c:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	93 2f       	mov	r25, r19
 142:	92 95       	swap	r25
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 14a:	92 bb       	out	0x12, r25	; 18
 14c:	82 2f       	mov	r24, r18
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 152:	94 98       	cbi	0x12, 4	; 18
 154:	82 2f       	mov	r24, r18
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 15a:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	3f 70       	andi	r19, 0x0F	; 15
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 164:	82 bb       	out	0x12, r24	; 18
 166:	82 2f       	mov	r24, r18
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 16c:	94 98       	cbi	0x12, 4	; 18
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDBusyLoop>
}
 176:	08 95       	ret

00000178 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 178:	1f 93       	push	r17
 17a:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17c:	8c e4       	ldi	r24, 0x4C	; 76
 17e:	9d e1       	ldi	r25, 0x1D	; 29
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDInit+0x8>

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 184:	81 b3       	in	r24, 0x11	; 17
 186:	8f 60       	ori	r24, 0x0F	; 15
 188:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 18a:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 18c:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 18e:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 190:	82 b3       	in	r24, 0x12	; 18
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 196:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 198:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 19a:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	98 2f       	mov	r25, r24
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCDInit+0x28>

	//Set 4-bit mode
	_delay_us(50);	//tAS

	SET_E();
 1a4:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1a6:	91 9a       	sbi	0x12, 1	; 18
 1a8:	98 2f       	mov	r25, r24
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDInit+0x32>
	_delay_us(50);
	CLEAR_E();
 1ae:	94 98       	cbi	0x12, 4	; 18
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDInit+0x38>
	_delay_us(50);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1b4:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1b8:	81 2f       	mov	r24, r17
 1ba:	8c 60       	ori	r24, 0x0C	; 12
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 1c2:	11 e2       	ldi	r17, 0x21	; 33
 1c4:	81 2f       	mov	r24, r17
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDInit+0x4e>
	_delay_us(100);
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
 1d2:	1a 95       	dec	r17
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDInit+0x5a>
	_delay_us(100);
}
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	msg++;
 1e8:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 1ea:	88 81       	ld	r24, Y
 1ec:	88 23       	and	r24, r24
 1ee:	c9 f7       	brne	.-14     	; 0x1e2 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <LCDWriteString_sliding>:
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
 1f6:	4f 92       	push	r4
 1f8:	5f 92       	push	r5
 1fa:	6f 92       	push	r6
 1fc:	7f 92       	push	r7
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	eb 01       	movw	r28, r22
  while (*strng>0)
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
 218:	3c 01       	movw	r6, r24
 21a:	88 24       	eor	r8, r8
 21c:	99 24       	eor	r9, r9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21e:	89 e1       	ldi	r24, 0x19	; 25
 220:	48 2e       	mov	r4, r24
 222:	51 2c       	mov	r5, r1
 224:	42 c0       	rjmp	.+132    	; 0x2aa <LCDWriteString_sliding+0xb4>
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
  {
	  LCDData(*strng++);
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
	  _delay_ms(delay_ms);
 22e:	c4 01       	movw	r24, r8
 230:	b3 01       	movw	r22, r6
 232:	0e 94 9a 02 	call	0x534	; 0x534 <__floatunsisf>
 236:	5b 01       	movw	r10, r22
 238:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	4a e7       	ldi	r20, 0x7A	; 122
 240:	53 e4       	ldi	r21, 0x43	; 67
 242:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__mulsf3>
 246:	7b 01       	movw	r14, r22
 248:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__cmpsf2>
 256:	88 23       	and	r24, r24
 258:	1c f4       	brge	.+6      	; 0x260 <LCDWriteString_sliding+0x6a>
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	22 c0       	rjmp	.+68     	; 0x2a4 <LCDWriteString_sliding+0xae>
		__ticks = 1;
	else if (__tmp > 65535)
 260:	c8 01       	movw	r24, r16
 262:	b7 01       	movw	r22, r14
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	57 e4       	ldi	r21, 0x47	; 71
 26c:	0e 94 4c 03 	call	0x698	; 0x698 <__gesf2>
 270:	18 16       	cp	r1, r24
 272:	a4 f4       	brge	.+40     	; 0x29c <LCDWriteString_sliding+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 274:	c6 01       	movw	r24, r12
 276:	b5 01       	movw	r22, r10
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	40 e2       	ldi	r20, 0x20	; 32
 27e:	51 e4       	ldi	r21, 0x41	; 65
 280:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__mulsf3>
 284:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__fixunssfsi>
 288:	05 c0       	rjmp	.+10     	; 0x294 <LCDWriteString_sliding+0x9e>
 28a:	c2 01       	movw	r24, r4
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDWriteString_sliding+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 290:	61 50       	subi	r22, 0x01	; 1
 292:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
 298:	c1 f7       	brne	.-16     	; 0x28a <LCDWriteString_sliding+0x94>
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <LCDWriteString_sliding+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29c:	c8 01       	movw	r24, r16
 29e:	b7 01       	movw	r22, r14
 2a0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__fixunssfsi>
 2a4:	cb 01       	movw	r24, r22
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCDWriteString_sliding+0xb0>
 }
}
//--------------------------------------------------
void LCDWriteString_sliding(unsigned int delay_ms,const char *strng)
{
  while (*strng>0)
 2aa:	88 81       	ld	r24, Y
 2ac:	88 23       	and	r24, r24
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <LCDWriteString_sliding+0xbc>
 2b0:	ba cf       	rjmp	.-140    	; 0x226 <LCDWriteString_sliding+0x30>
  {
	  LCDData(*strng++);
	  _delay_ms(delay_ms);
  }
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	7f 90       	pop	r7
 2cc:	6f 90       	pop	r6
 2ce:	5f 90       	pop	r5
 2d0:	4f 90       	pop	r4
 2d2:	08 95       	ret

000002d4 <LCDWriteInt>:
//-----------------------------------------------------
void LCDWriteInt(int val,unsigned int field_length)
{
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <LCDWriteInt+0xe>
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <LCDWriteInt+0x10>
 2e4:	0f 92       	push	r0
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	9c 01       	movw	r18, r24
 2ec:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2ee:	fe 01       	movw	r30, r28
 2f0:	31 96       	adiw	r30, 0x01	; 1
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	df 01       	movw	r26, r30
 2f6:	1d 92       	st	X+, r1
 2f8:	8a 95       	dec	r24
 2fa:	e9 f7       	brne	.-6      	; 0x2f6 <LCDWriteInt+0x22>
 2fc:	fe 01       	movw	r30, r28
 2fe:	35 96       	adiw	r30, 0x05	; 5
 300:	0d c0       	rjmp	.+26     	; 0x31c <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 302:	c9 01       	movw	r24, r18
 304:	6a e0       	ldi	r22, 0x0A	; 10
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
 30c:	80 83       	st	Z, r24
	val=val/10;
 30e:	c9 01       	movw	r24, r18
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
 318:	9b 01       	movw	r18, r22
 31a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 31c:	21 15       	cp	r18, r1
 31e:	31 05       	cpc	r19, r1
 320:	81 f7       	brne	.-32     	; 0x302 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 322:	bf ef       	ldi	r27, 0xFF	; 255
 324:	0f 3f       	cpi	r16, 0xFF	; 255
 326:	1b 07       	cpc	r17, r27
 328:	79 f4       	brne	.+30     	; 0x348 <LCDWriteInt+0x74>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 32e:	ae 01       	movw	r20, r28
 330:	4f 5f       	subi	r20, 0xFF	; 255
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	02 c0       	rjmp	.+4      	; 0x33a <LCDWriteInt+0x66>
 336:	2f 5f       	subi	r18, 0xFF	; 255
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	fa 01       	movw	r30, r20
 33c:	e2 0f       	add	r30, r18
 33e:	f3 1f       	adc	r31, r19
 340:	80 81       	ld	r24, Z
 342:	88 23       	and	r24, r24
 344:	c1 f3       	breq	.-16     	; 0x336 <LCDWriteInt+0x62>
 346:	04 c0       	rjmp	.+8      	; 0x350 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 348:	25 e0       	ldi	r18, 0x05	; 5
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	20 1b       	sub	r18, r16
 34e:	31 0b       	sbc	r19, r17
 350:	7e 01       	movw	r14, r28
 352:	08 94       	sec
 354:	e1 1c       	adc	r14, r1
 356:	f1 1c       	adc	r15, r1
 358:	e2 0e       	add	r14, r18
 35a:	f3 1e       	adc	r15, r19
 35c:	89 01       	movw	r16, r18
 35e:	09 c0       	rjmp	.+18     	; 0x372 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 360:	f7 01       	movw	r30, r14
 362:	81 91       	ld	r24, Z+
 364:	7f 01       	movw	r14, r30
 366:	80 5d       	subi	r24, 0xD0	; 208
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 36e:	0f 5f       	subi	r16, 0xFF	; 255
 370:	1f 4f       	sbci	r17, 0xFF	; 255
 372:	05 30       	cpi	r16, 0x05	; 5
 374:	11 05       	cpc	r17, r1
 376:	a4 f3       	brlt	.-24     	; 0x360 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	00 d0       	rcall	.+0      	; 0x396 <LCDGotoXY+0x6>
 396:	00 d0       	rcall	.+0      	; 0x398 <LCDGotoXY+0x8>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	98 2f       	mov	r25, r24
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
    if(x<20)
 39e:	84 31       	cpi	r24, 0x14	; 20
 3a0:	80 f4       	brcc	.+32     	; 0x3c2 <LCDGotoXY+0x32>
{
 /*
 here,y=yth line and x is the cursor position of that line
 so,cursor_position=start address of yth line+x
 */
    uint8_t line[4]={128,192,148,212};//1st line start address 0x80 or 128,2nd 0xC0 or 192,3rd 0x94 & 4th 0xD4
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	8a 83       	std	Y+2, r24	; 0x02
 3aa:	84 e9       	ldi	r24, 0x94	; 148
 3ac:	8b 83       	std	Y+3, r24	; 0x03
 3ae:	84 ed       	ldi	r24, 0xD4	; 212
 3b0:	8c 83       	std	Y+4, r24	; 0x04
    if(x<20)
    LCDCmd(line[y]+x);//if(y==0)x|=0x80,if(y==1)x|=0x80,if(y==2)x|=0x80,if(y==3)x|=0x80
 3b2:	fe 01       	movw	r30, r28
 3b4:	e6 0f       	add	r30, r22
 3b6:	f1 1d       	adc	r31, r1
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	89 0f       	add	r24, r25
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	0e 94 94 00 	call	0x128	; 0x128 <LCDByte>

}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <adc_init>:
#include<avr/io.h>
#include<util/delay.h>

void adc_init(){
	ADMUX  |=(1<<REFS0);						//Reference Selection
 3d0:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADPS1)|(1<<ADPS2)|(1<<ADPS0);						
 3d2:	86 b1       	in	r24, 0x06	; 6
 3d4:	87 60       	ori	r24, 0x07	; 7
 3d6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); 						//Enabling ADC
 3d8:	37 9a       	sbi	0x06, 7	; 6
}
 3da:	08 95       	ret

000003dc <adc_read>:

int adc_read(int chanel){
 3dc:	1f 93       	push	r17
 3de:	18 2f       	mov	r17, r24
	adc_init();
 3e0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <adc_init>
	ADMUX |= chanel;									//Channel selection AC0
 3e4:	87 b1       	in	r24, 0x07	; 7
 3e6:	81 2b       	or	r24, r17
 3e8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 3ea:	36 9a       	sbi	0x06, 6	; 6
    while(ADCSRA & 0b01000000){
 3ec:	36 99       	sbic	0x06, 6	; 6
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <adc_read+0x10>
	
	};
	    					//Start Convertion
	//int value = ADCL;							//Store Value 
	//value |= (ADCH<<8);						
	return(ADC);
 3f0:	24 b1       	in	r18, 0x04	; 4
 3f2:	35 b1       	in	r19, 0x05	; 5
}
 3f4:	c9 01       	movw	r24, r18
 3f6:	1f 91       	pop	r17
 3f8:	08 95       	ret

000003fa <__cmpsf2>:
 3fa:	d9 d0       	rcall	.+434    	; 0x5ae <__fp_cmp>
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__cmpsf2+0x6>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <__divsf3>:
 402:	0c d0       	rcall	.+24     	; 0x41c <__divsf3x>
 404:	0f c1       	rjmp	.+542    	; 0x624 <__fp_round>
 406:	07 d1       	rcall	.+526    	; 0x616 <__fp_pscB>
 408:	40 f0       	brcs	.+16     	; 0x41a <__divsf3+0x18>
 40a:	fe d0       	rcall	.+508    	; 0x608 <__fp_pscA>
 40c:	30 f0       	brcs	.+12     	; 0x41a <__divsf3+0x18>
 40e:	21 f4       	brne	.+8      	; 0x418 <__divsf3+0x16>
 410:	5f 3f       	cpi	r21, 0xFF	; 255
 412:	19 f0       	breq	.+6      	; 0x41a <__divsf3+0x18>
 414:	f0 c0       	rjmp	.+480    	; 0x5f6 <__fp_inf>
 416:	51 11       	cpse	r21, r1
 418:	39 c1       	rjmp	.+626    	; 0x68c <__fp_szero>
 41a:	f3 c0       	rjmp	.+486    	; 0x602 <__fp_nan>

0000041c <__divsf3x>:
 41c:	14 d1       	rcall	.+552    	; 0x646 <__fp_split3>
 41e:	98 f3       	brcs	.-26     	; 0x406 <__divsf3+0x4>

00000420 <__divsf3_pse>:
 420:	99 23       	and	r25, r25
 422:	c9 f3       	breq	.-14     	; 0x416 <__divsf3+0x14>
 424:	55 23       	and	r21, r21
 426:	b1 f3       	breq	.-20     	; 0x414 <__divsf3+0x12>
 428:	95 1b       	sub	r25, r21
 42a:	55 0b       	sbc	r21, r21
 42c:	bb 27       	eor	r27, r27
 42e:	aa 27       	eor	r26, r26
 430:	62 17       	cp	r22, r18
 432:	73 07       	cpc	r23, r19
 434:	84 07       	cpc	r24, r20
 436:	38 f0       	brcs	.+14     	; 0x446 <__divsf3_pse+0x26>
 438:	9f 5f       	subi	r25, 0xFF	; 255
 43a:	5f 4f       	sbci	r21, 0xFF	; 255
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	44 1f       	adc	r20, r20
 442:	aa 1f       	adc	r26, r26
 444:	a9 f3       	breq	.-22     	; 0x430 <__divsf3_pse+0x10>
 446:	33 d0       	rcall	.+102    	; 0x4ae <__divsf3_pse+0x8e>
 448:	0e 2e       	mov	r0, r30
 44a:	3a f0       	brmi	.+14     	; 0x45a <__divsf3_pse+0x3a>
 44c:	e0 e8       	ldi	r30, 0x80	; 128
 44e:	30 d0       	rcall	.+96     	; 0x4b0 <__divsf3_pse+0x90>
 450:	91 50       	subi	r25, 0x01	; 1
 452:	50 40       	sbci	r21, 0x00	; 0
 454:	e6 95       	lsr	r30
 456:	00 1c       	adc	r0, r0
 458:	ca f7       	brpl	.-14     	; 0x44c <__divsf3_pse+0x2c>
 45a:	29 d0       	rcall	.+82     	; 0x4ae <__divsf3_pse+0x8e>
 45c:	fe 2f       	mov	r31, r30
 45e:	27 d0       	rcall	.+78     	; 0x4ae <__divsf3_pse+0x8e>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	bb 1f       	adc	r27, r27
 468:	26 17       	cp	r18, r22
 46a:	37 07       	cpc	r19, r23
 46c:	48 07       	cpc	r20, r24
 46e:	ab 07       	cpc	r26, r27
 470:	b0 e8       	ldi	r27, 0x80	; 128
 472:	09 f0       	breq	.+2      	; 0x476 <__divsf3_pse+0x56>
 474:	bb 0b       	sbc	r27, r27
 476:	80 2d       	mov	r24, r0
 478:	bf 01       	movw	r22, r30
 47a:	ff 27       	eor	r31, r31
 47c:	93 58       	subi	r25, 0x83	; 131
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	2a f0       	brmi	.+10     	; 0x48c <__divsf3_pse+0x6c>
 482:	9e 3f       	cpi	r25, 0xFE	; 254
 484:	51 05       	cpc	r21, r1
 486:	68 f0       	brcs	.+26     	; 0x4a2 <__divsf3_pse+0x82>
 488:	b6 c0       	rjmp	.+364    	; 0x5f6 <__fp_inf>
 48a:	00 c1       	rjmp	.+512    	; 0x68c <__fp_szero>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	ec f3       	brlt	.-6      	; 0x48a <__divsf3_pse+0x6a>
 490:	98 3e       	cpi	r25, 0xE8	; 232
 492:	dc f3       	brlt	.-10     	; 0x48a <__divsf3_pse+0x6a>
 494:	86 95       	lsr	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f7 95       	ror	r31
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__divsf3_pse+0x74>
 4a2:	88 0f       	add	r24, r24
 4a4:	91 1d       	adc	r25, r1
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret
 4ae:	e1 e0       	ldi	r30, 0x01	; 1
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	bb 1f       	adc	r27, r27
 4b8:	62 17       	cp	r22, r18
 4ba:	73 07       	cpc	r23, r19
 4bc:	84 07       	cpc	r24, r20
 4be:	ba 07       	cpc	r27, r26
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <__divsf3_pse+0xaa>
 4c2:	62 1b       	sub	r22, r18
 4c4:	73 0b       	sbc	r23, r19
 4c6:	84 0b       	sbc	r24, r20
 4c8:	ba 0b       	sbc	r27, r26
 4ca:	ee 1f       	adc	r30, r30
 4cc:	88 f7       	brcc	.-30     	; 0x4b0 <__divsf3_pse+0x90>
 4ce:	e0 95       	com	r30
 4d0:	08 95       	ret

000004d2 <__fixsfsi>:
 4d2:	04 d0       	rcall	.+8      	; 0x4dc <__fixunssfsi>
 4d4:	68 94       	set
 4d6:	b1 11       	cpse	r27, r1
 4d8:	d9 c0       	rjmp	.+434    	; 0x68c <__fp_szero>
 4da:	08 95       	ret

000004dc <__fixunssfsi>:
 4dc:	bc d0       	rcall	.+376    	; 0x656 <__fp_splitA>
 4de:	88 f0       	brcs	.+34     	; 0x502 <__fixunssfsi+0x26>
 4e0:	9f 57       	subi	r25, 0x7F	; 127
 4e2:	90 f0       	brcs	.+36     	; 0x508 <__fixunssfsi+0x2c>
 4e4:	b9 2f       	mov	r27, r25
 4e6:	99 27       	eor	r25, r25
 4e8:	b7 51       	subi	r27, 0x17	; 23
 4ea:	a0 f0       	brcs	.+40     	; 0x514 <__fixunssfsi+0x38>
 4ec:	d1 f0       	breq	.+52     	; 0x522 <__fixunssfsi+0x46>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	88 1f       	adc	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	1a f0       	brmi	.+6      	; 0x4fe <__fixunssfsi+0x22>
 4f8:	ba 95       	dec	r27
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <__fixunssfsi+0x12>
 4fc:	12 c0       	rjmp	.+36     	; 0x522 <__fixunssfsi+0x46>
 4fe:	b1 30       	cpi	r27, 0x01	; 1
 500:	81 f0       	breq	.+32     	; 0x522 <__fixunssfsi+0x46>
 502:	c3 d0       	rcall	.+390    	; 0x68a <__fp_zero>
 504:	b1 e0       	ldi	r27, 0x01	; 1
 506:	08 95       	ret
 508:	c0 c0       	rjmp	.+384    	; 0x68a <__fp_zero>
 50a:	67 2f       	mov	r22, r23
 50c:	78 2f       	mov	r23, r24
 50e:	88 27       	eor	r24, r24
 510:	b8 5f       	subi	r27, 0xF8	; 248
 512:	39 f0       	breq	.+14     	; 0x522 <__fixunssfsi+0x46>
 514:	b9 3f       	cpi	r27, 0xF9	; 249
 516:	cc f3       	brlt	.-14     	; 0x50a <__fixunssfsi+0x2e>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b3 95       	inc	r27
 520:	d9 f7       	brne	.-10     	; 0x518 <__fixunssfsi+0x3c>
 522:	3e f4       	brtc	.+14     	; 0x532 <__fixunssfsi+0x56>
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__floatunsisf>:
 534:	e8 94       	clt
 536:	09 c0       	rjmp	.+18     	; 0x54a <__floatsisf+0x12>

00000538 <__floatsisf>:
 538:	97 fb       	bst	r25, 7
 53a:	3e f4       	brtc	.+14     	; 0x54a <__floatsisf+0x12>
 53c:	90 95       	com	r25
 53e:	80 95       	com	r24
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	99 23       	and	r25, r25
 54c:	a9 f0       	breq	.+42     	; 0x578 <__floatsisf+0x40>
 54e:	f9 2f       	mov	r31, r25
 550:	96 e9       	ldi	r25, 0x96	; 150
 552:	bb 27       	eor	r27, r27
 554:	93 95       	inc	r25
 556:	f6 95       	lsr	r31
 558:	87 95       	ror	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f1 11       	cpse	r31, r1
 562:	f8 cf       	rjmp	.-16     	; 0x554 <__floatsisf+0x1c>
 564:	fa f4       	brpl	.+62     	; 0x5a4 <__floatsisf+0x6c>
 566:	bb 0f       	add	r27, r27
 568:	11 f4       	brne	.+4      	; 0x56e <__floatsisf+0x36>
 56a:	60 ff       	sbrs	r22, 0
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__floatsisf+0x6c>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <__floatsisf+0x6c>
 578:	88 23       	and	r24, r24
 57a:	11 f0       	breq	.+4      	; 0x580 <__floatsisf+0x48>
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <__floatsisf+0x6a>
 580:	77 23       	and	r23, r23
 582:	21 f0       	breq	.+8      	; 0x58c <__floatsisf+0x54>
 584:	9e e8       	ldi	r25, 0x8E	; 142
 586:	87 2f       	mov	r24, r23
 588:	76 2f       	mov	r23, r22
 58a:	05 c0       	rjmp	.+10     	; 0x596 <__floatsisf+0x5e>
 58c:	66 23       	and	r22, r22
 58e:	71 f0       	breq	.+28     	; 0x5ac <__floatsisf+0x74>
 590:	96 e8       	ldi	r25, 0x86	; 134
 592:	86 2f       	mov	r24, r22
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	2a f0       	brmi	.+10     	; 0x5a4 <__floatsisf+0x6c>
 59a:	9a 95       	dec	r25
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	da f7       	brpl	.-10     	; 0x59a <__floatsisf+0x62>
 5a4:	88 0f       	add	r24, r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__fp_cmp>:
 5ae:	99 0f       	add	r25, r25
 5b0:	00 08       	sbc	r0, r0
 5b2:	55 0f       	add	r21, r21
 5b4:	aa 0b       	sbc	r26, r26
 5b6:	e0 e8       	ldi	r30, 0x80	; 128
 5b8:	fe ef       	ldi	r31, 0xFE	; 254
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	e8 07       	cpc	r30, r24
 5c0:	f9 07       	cpc	r31, r25
 5c2:	c0 f0       	brcs	.+48     	; 0x5f4 <__fp_cmp+0x46>
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	e4 07       	cpc	r30, r20
 5ca:	f5 07       	cpc	r31, r21
 5cc:	98 f0       	brcs	.+38     	; 0x5f4 <__fp_cmp+0x46>
 5ce:	62 1b       	sub	r22, r18
 5d0:	73 0b       	sbc	r23, r19
 5d2:	84 0b       	sbc	r24, r20
 5d4:	95 0b       	sbc	r25, r21
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__fp_cmp+0x38>
 5d8:	0a 26       	eor	r0, r26
 5da:	61 f0       	breq	.+24     	; 0x5f4 <__fp_cmp+0x46>
 5dc:	23 2b       	or	r18, r19
 5de:	24 2b       	or	r18, r20
 5e0:	25 2b       	or	r18, r21
 5e2:	21 f4       	brne	.+8      	; 0x5ec <__fp_cmp+0x3e>
 5e4:	08 95       	ret
 5e6:	0a 26       	eor	r0, r26
 5e8:	09 f4       	brne	.+2      	; 0x5ec <__fp_cmp+0x3e>
 5ea:	a1 40       	sbci	r26, 0x01	; 1
 5ec:	a6 95       	lsr	r26
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	81 1d       	adc	r24, r1
 5f2:	81 1d       	adc	r24, r1
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_split3>:
 646:	57 fd       	sbrc	r21, 7
 648:	90 58       	subi	r25, 0x80	; 128
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	59 f0       	breq	.+22     	; 0x666 <__fp_splitA+0x10>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	71 f0       	breq	.+28     	; 0x670 <__fp_splitA+0x1a>
 654:	47 95       	ror	r20

00000656 <__fp_splitA>:
 656:	88 0f       	add	r24, r24
 658:	97 fb       	bst	r25, 7
 65a:	99 1f       	adc	r25, r25
 65c:	61 f0       	breq	.+24     	; 0x676 <__fp_splitA+0x20>
 65e:	9f 3f       	cpi	r25, 0xFF	; 255
 660:	79 f0       	breq	.+30     	; 0x680 <__fp_splitA+0x2a>
 662:	87 95       	ror	r24
 664:	08 95       	ret
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	55 1f       	adc	r21, r21
 66e:	f2 cf       	rjmp	.-28     	; 0x654 <__fp_split3+0xe>
 670:	46 95       	lsr	r20
 672:	f1 df       	rcall	.-30     	; 0x656 <__fp_splitA>
 674:	08 c0       	rjmp	.+16     	; 0x686 <__fp_splitA+0x30>
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	99 1f       	adc	r25, r25
 67e:	f1 cf       	rjmp	.-30     	; 0x662 <__fp_splitA+0xc>
 680:	86 95       	lsr	r24
 682:	71 05       	cpc	r23, r1
 684:	61 05       	cpc	r22, r1
 686:	08 94       	sec
 688:	08 95       	ret

0000068a <__fp_zero>:
 68a:	e8 94       	clt

0000068c <__fp_szero>:
 68c:	bb 27       	eor	r27, r27
 68e:	66 27       	eor	r22, r22
 690:	77 27       	eor	r23, r23
 692:	cb 01       	movw	r24, r22
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__gesf2>:
 698:	8a df       	rcall	.-236    	; 0x5ae <__fp_cmp>
 69a:	08 f4       	brcc	.+2      	; 0x69e <__gesf2+0x6>
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__mulsf3>:
 6a0:	0b d0       	rcall	.+22     	; 0x6b8 <__mulsf3x>
 6a2:	c0 cf       	rjmp	.-128    	; 0x624 <__fp_round>
 6a4:	b1 df       	rcall	.-158    	; 0x608 <__fp_pscA>
 6a6:	28 f0       	brcs	.+10     	; 0x6b2 <__mulsf3+0x12>
 6a8:	b6 df       	rcall	.-148    	; 0x616 <__fp_pscB>
 6aa:	18 f0       	brcs	.+6      	; 0x6b2 <__mulsf3+0x12>
 6ac:	95 23       	and	r25, r21
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__mulsf3+0x12>
 6b0:	a2 cf       	rjmp	.-188    	; 0x5f6 <__fp_inf>
 6b2:	a7 cf       	rjmp	.-178    	; 0x602 <__fp_nan>
 6b4:	11 24       	eor	r1, r1
 6b6:	ea cf       	rjmp	.-44     	; 0x68c <__fp_szero>

000006b8 <__mulsf3x>:
 6b8:	c6 df       	rcall	.-116    	; 0x646 <__fp_split3>
 6ba:	a0 f3       	brcs	.-24     	; 0x6a4 <__mulsf3+0x4>

000006bc <__mulsf3_pse>:
 6bc:	95 9f       	mul	r25, r21
 6be:	d1 f3       	breq	.-12     	; 0x6b4 <__mulsf3+0x14>
 6c0:	95 0f       	add	r25, r21
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	55 1f       	adc	r21, r21
 6c6:	62 9f       	mul	r22, r18
 6c8:	f0 01       	movw	r30, r0
 6ca:	72 9f       	mul	r23, r18
 6cc:	bb 27       	eor	r27, r27
 6ce:	f0 0d       	add	r31, r0
 6d0:	b1 1d       	adc	r27, r1
 6d2:	63 9f       	mul	r22, r19
 6d4:	aa 27       	eor	r26, r26
 6d6:	f0 0d       	add	r31, r0
 6d8:	b1 1d       	adc	r27, r1
 6da:	aa 1f       	adc	r26, r26
 6dc:	64 9f       	mul	r22, r20
 6de:	66 27       	eor	r22, r22
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	66 1f       	adc	r22, r22
 6e6:	82 9f       	mul	r24, r18
 6e8:	22 27       	eor	r18, r18
 6ea:	b0 0d       	add	r27, r0
 6ec:	a1 1d       	adc	r26, r1
 6ee:	62 1f       	adc	r22, r18
 6f0:	73 9f       	mul	r23, r19
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	62 1f       	adc	r22, r18
 6f8:	83 9f       	mul	r24, r19
 6fa:	a0 0d       	add	r26, r0
 6fc:	61 1d       	adc	r22, r1
 6fe:	22 1f       	adc	r18, r18
 700:	74 9f       	mul	r23, r20
 702:	33 27       	eor	r19, r19
 704:	a0 0d       	add	r26, r0
 706:	61 1d       	adc	r22, r1
 708:	23 1f       	adc	r18, r19
 70a:	84 9f       	mul	r24, r20
 70c:	60 0d       	add	r22, r0
 70e:	21 1d       	adc	r18, r1
 710:	82 2f       	mov	r24, r18
 712:	76 2f       	mov	r23, r22
 714:	6a 2f       	mov	r22, r26
 716:	11 24       	eor	r1, r1
 718:	9f 57       	subi	r25, 0x7F	; 127
 71a:	50 40       	sbci	r21, 0x00	; 0
 71c:	8a f0       	brmi	.+34     	; 0x740 <__mulsf3_pse+0x84>
 71e:	e1 f0       	breq	.+56     	; 0x758 <__mulsf3_pse+0x9c>
 720:	88 23       	and	r24, r24
 722:	4a f0       	brmi	.+18     	; 0x736 <__mulsf3_pse+0x7a>
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	bb 1f       	adc	r27, r27
 72a:	66 1f       	adc	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	91 50       	subi	r25, 0x01	; 1
 732:	50 40       	sbci	r21, 0x00	; 0
 734:	a9 f7       	brne	.-22     	; 0x720 <__mulsf3_pse+0x64>
 736:	9e 3f       	cpi	r25, 0xFE	; 254
 738:	51 05       	cpc	r21, r1
 73a:	70 f0       	brcs	.+28     	; 0x758 <__mulsf3_pse+0x9c>
 73c:	5c cf       	rjmp	.-328    	; 0x5f6 <__fp_inf>
 73e:	a6 cf       	rjmp	.-180    	; 0x68c <__fp_szero>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	ec f3       	brlt	.-6      	; 0x73e <__mulsf3_pse+0x82>
 744:	98 3e       	cpi	r25, 0xE8	; 232
 746:	dc f3       	brlt	.-10     	; 0x73e <__mulsf3_pse+0x82>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	e7 95       	ror	r30
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	c1 f7       	brne	.-16     	; 0x748 <__mulsf3_pse+0x8c>
 758:	fe 2b       	or	r31, r30
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__divmodhi4>:
 766:	97 fb       	bst	r25, 7
 768:	09 2e       	mov	r0, r25
 76a:	07 26       	eor	r0, r23
 76c:	0a d0       	rcall	.+20     	; 0x782 <__divmodhi4_neg1>
 76e:	77 fd       	sbrc	r23, 7
 770:	04 d0       	rcall	.+8      	; 0x77a <__divmodhi4_neg2>
 772:	0c d0       	rcall	.+24     	; 0x78c <__udivmodhi4>
 774:	06 d0       	rcall	.+12     	; 0x782 <__divmodhi4_neg1>
 776:	00 20       	and	r0, r0
 778:	1a f4       	brpl	.+6      	; 0x780 <__divmodhi4_exit>

0000077a <__divmodhi4_neg2>:
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255

00000780 <__divmodhi4_exit>:
 780:	08 95       	ret

00000782 <__divmodhi4_neg1>:
 782:	f6 f7       	brtc	.-4      	; 0x780 <__divmodhi4_exit>
 784:	90 95       	com	r25
 786:	81 95       	neg	r24
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__udivmodhi4>:
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	51 e1       	ldi	r21, 0x11	; 17
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <__udivmodhi4_ep>

00000794 <__udivmodhi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	a6 17       	cp	r26, r22
 79a:	b7 07       	cpc	r27, r23
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <__udivmodhi4_ep>
 79e:	a6 1b       	sub	r26, r22
 7a0:	b7 0b       	sbc	r27, r23

000007a2 <__udivmodhi4_ep>:
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	5a 95       	dec	r21
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__udivmodhi4_loop>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	bc 01       	movw	r22, r24
 7b0:	cd 01       	movw	r24, r26
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
