
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000027  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e7  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000141  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d7  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bb  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display>:
#include<avr/io.h>
#include<util/delay.h>

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
  82:	dc 01       	movw	r26, r24
  84:	fa 01       	movw	r30, r20
	
	*segment = 0b11111111;
	*port= data;
  86:	20 83       	st	Z, r18
	*segment = ~(1<<(seg-1));
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	61 50       	subi	r22, 0x01	; 1
  8c:	70 40       	sbci	r23, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <display+0x16>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <display+0x12>
  9c:	80 95       	com	r24
  9e:	8c 93       	st	X, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	97 e2       	ldi	r25, 0x27	; 39
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <display+0x22>
	_delay_ms(5);
}
  a8:	08 95       	ret

000000aa <main>:

int main(){
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61

	DDRA=0b11111111;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11111111;
  d0:	87 bb       	out	0x17, r24	; 23
	
	while(1){
	
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
  d2:	7e 01       	movw	r14, r28
  d4:	08 94       	sec
  d6:	e1 1c       	adc	r14, r1
  d8:	f1 1c       	adc	r15, r1
  da:	00 e1       	ldi	r16, 0x10	; 16
  dc:	17 e2       	ldi	r17, 0x27	; 39
#include<util/delay.h>

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
	
	*segment = 0b11111111;
	*port= data;
  de:	4f e3       	ldi	r20, 0x3F	; 63
  e0:	b4 2e       	mov	r11, r20
	*segment = ~(1<<(seg-1));
  e2:	3b ef       	ldi	r19, 0xFB	; 251
  e4:	c3 2e       	mov	r12, r19
	DDRA=0b11111111;
	DDRB=0b11111111;
	
	while(1){
	
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
  e6:	2d ef       	ldi	r18, 0xFD	; 253
  e8:	d2 2e       	mov	r13, r18
  ea:	4e ef       	ldi	r20, 0xFE	; 254
  ec:	d7 01       	movw	r26, r14
  ee:	e0 e6       	ldi	r30, 0x60	; 96
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	84 e1       	ldi	r24, 0x14	; 20
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x4a>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	c8 01       	movw	r24, r16
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x58>
#include<util/delay.h>

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
	
	*segment = 0b11111111;
	*port= data;
 106:	bb ba       	out	0x1b, r11	; 27
	*segment = ~(1<<(seg-1));
 108:	c8 ba       	out	0x18, r12	; 24
 10a:	c8 01       	movw	r24, r16
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x62>
			//display(2,value[first_segment]);
			//display(1,value[second_segment]);
			
			display(&PORTB,4,&PORTA,0x5b);
			display(&PORTB,3,&PORTA,0x3f);
			display(&PORTB,2,&PORTA,value[first_segment]);
 110:	c9 01       	movw	r24, r18
 112:	6a e0       	ldi	r22, 0x0A	; 10
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 ae 00 	call	0x15c	; 0x15c <__divmodhi4>
 11a:	fb 01       	movw	r30, r22
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ee 0d       	add	r30, r14
 122:	ff 1d       	adc	r31, r15
 124:	80 81       	ld	r24, Z
#include<util/delay.h>

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
	
	*segment = 0b11111111;
	*port= data;
 126:	8b bb       	out	0x1b, r24	; 27
	*segment = ~(1<<(seg-1));
 128:	d8 ba       	out	0x18, r13	; 24
 12a:	c8 01       	movw	r24, r16
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x82>
			//display(1,value[second_segment]);
			
			display(&PORTB,4,&PORTA,0x5b);
			display(&PORTB,3,&PORTA,0x3f);
			display(&PORTB,2,&PORTA,value[first_segment]);
			display(&PORTB,1,&PORTA,value[second_segment]);
 130:	c9 01       	movw	r24, r18
 132:	6a e0       	ldi	r22, 0x0A	; 10
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 ae 00 	call	0x15c	; 0x15c <__divmodhi4>
 13a:	fc 01       	movw	r30, r24
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ee 0d       	add	r30, r14
 142:	ff 1d       	adc	r31, r15
 144:	80 81       	ld	r24, Z
#include<util/delay.h>

void display(char *segment, unsigned char seg ,char *port, unsigned char data){
	
	*segment = 0b11111111;
	*port= data;
 146:	8b bb       	out	0x1b, r24	; 27
	*segment = ~(1<<(seg-1));
 148:	48 bb       	out	0x18, r20	; 24
 14a:	c8 01       	movw	r24, r16
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0xa2>
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
	 int first_segment=0,second_segment=0;
			
		
		
		for(int i=0;i<45;i++){
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	2d 32       	cpi	r18, 0x2D	; 45
 156:	31 05       	cpc	r19, r1
 158:	99 f6       	brne	.-90     	; 0x100 <main+0x56>
 15a:	c8 cf       	rjmp	.-112    	; 0xec <main+0x42>

0000015c <__divmodhi4>:
 15c:	97 fb       	bst	r25, 7
 15e:	09 2e       	mov	r0, r25
 160:	07 26       	eor	r0, r23
 162:	0a d0       	rcall	.+20     	; 0x178 <__divmodhi4_neg1>
 164:	77 fd       	sbrc	r23, 7
 166:	04 d0       	rcall	.+8      	; 0x170 <__divmodhi4_neg2>
 168:	0c d0       	rcall	.+24     	; 0x182 <__udivmodhi4>
 16a:	06 d0       	rcall	.+12     	; 0x178 <__divmodhi4_neg1>
 16c:	00 20       	and	r0, r0
 16e:	1a f4       	brpl	.+6      	; 0x176 <__divmodhi4_exit>

00000170 <__divmodhi4_neg2>:
 170:	70 95       	com	r23
 172:	61 95       	neg	r22
 174:	7f 4f       	sbci	r23, 0xFF	; 255

00000176 <__divmodhi4_exit>:
 176:	08 95       	ret

00000178 <__divmodhi4_neg1>:
 178:	f6 f7       	brtc	.-4      	; 0x176 <__divmodhi4_exit>
 17a:	90 95       	com	r25
 17c:	81 95       	neg	r24
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	08 95       	ret

00000182 <__udivmodhi4>:
 182:	aa 1b       	sub	r26, r26
 184:	bb 1b       	sub	r27, r27
 186:	51 e1       	ldi	r21, 0x11	; 17
 188:	07 c0       	rjmp	.+14     	; 0x198 <__udivmodhi4_ep>

0000018a <__udivmodhi4_loop>:
 18a:	aa 1f       	adc	r26, r26
 18c:	bb 1f       	adc	r27, r27
 18e:	a6 17       	cp	r26, r22
 190:	b7 07       	cpc	r27, r23
 192:	10 f0       	brcs	.+4      	; 0x198 <__udivmodhi4_ep>
 194:	a6 1b       	sub	r26, r22
 196:	b7 0b       	sbc	r27, r23

00000198 <__udivmodhi4_ep>:
 198:	88 1f       	adc	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	5a 95       	dec	r21
 19e:	a9 f7       	brne	.-22     	; 0x18a <__udivmodhi4_loop>
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	bc 01       	movw	r22, r24
 1a6:	cd 01       	movw	r24, r26
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
