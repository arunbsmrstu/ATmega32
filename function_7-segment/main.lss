
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000027  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001df  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012d  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000164  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000096  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display>:
#include<avr/io.h>
#include<util/delay.h>


void display(char *segment, unsigned char seg ,char *port, unsigned char data){
  82:	dc 01       	movw	r26, r24
  84:	fa 01       	movw	r30, r20
	
	*segment = 0b11111111;
	*port= data;
  86:	20 83       	st	Z, r18
	*segment = ~(1<<(seg-1));
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	61 50       	subi	r22, 0x01	; 1
  8c:	70 40       	sbci	r23, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <display+0x16>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <display+0x12>
  9c:	80 95       	com	r24
  9e:	8c 93       	st	X, r24
  a0:	84 ef       	ldi	r24, 0xF4	; 244
  a2:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	28 ec       	ldi	r18, 0xC8	; 200
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <display+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <display+0x26>
	_delay_ms(50);
}
  b2:	08 95       	ret

000000b4 <main>:

int main(){
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61

	DDRA=0b11111111;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11111111;
  d4:	87 bb       	out	0x17, r24	; 23
	
	while(1){
	
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
  d6:	7e 01       	movw	r14, r28
  d8:	08 94       	sec
  da:	e1 1c       	adc	r14, r1
  dc:	f1 1c       	adc	r15, r1
  de:	d7 01       	movw	r26, r14
  e0:	e0 e6       	ldi	r30, 0x60	; 96
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x32>
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	10 e0       	ldi	r17, 0x00	; 0
			//display(4,0x5b);
			//display(3,0x3f);
			//display(2,value[first_segment]);
			//display(1,value[second_segment]);
			
			display(&PORTB,4,&PORTA,0x5b);
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	4b e3       	ldi	r20, 0x3B	; 59
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	2b e5       	ldi	r18, 0x5B	; 91
  fe:	0e 94 41 00 	call	0x82	; 0x82 <display>
			display(&PORTB,3,&PORTA,0x3f);
 102:	88 e3       	ldi	r24, 0x38	; 56
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	4b e3       	ldi	r20, 0x3B	; 59
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	2f e3       	ldi	r18, 0x3F	; 63
 10e:	0e 94 41 00 	call	0x82	; 0x82 <display>
			display(&PORTB,2,&PORTA,value[first_segment]);
 112:	c8 01       	movw	r24, r16
 114:	6a e0       	ldi	r22, 0x0A	; 10
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 11c:	fb 01       	movw	r30, r22
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ee 0d       	add	r30, r14
 124:	ff 1d       	adc	r31, r15
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	4b e3       	ldi	r20, 0x3B	; 59
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	20 81       	ld	r18, Z
 132:	0e 94 41 00 	call	0x82	; 0x82 <display>
			display(&PORTB,1,&PORTA,value[second_segment]);
 136:	c8 01       	movw	r24, r16
 138:	6a e0       	ldi	r22, 0x0A	; 10
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 b3 00 	call	0x166	; 0x166 <__divmodhi4>
 140:	fc 01       	movw	r30, r24
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	ee 0d       	add	r30, r14
 148:	ff 1d       	adc	r31, r15
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	4b e3       	ldi	r20, 0x3B	; 59
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	20 81       	ld	r18, Z
 156:	0e 94 41 00 	call	0x82	; 0x82 <display>
	 int value[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
	 int first_segment=0,second_segment=0;
			
		
		
		for(int i=0;i<45;i++){
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	0d 32       	cpi	r16, 0x2D	; 45
 160:	11 05       	cpc	r17, r1
 162:	39 f6       	brne	.-114    	; 0xf2 <main+0x3e>
 164:	bc cf       	rjmp	.-136    	; 0xde <main+0x2a>

00000166 <__divmodhi4>:
 166:	97 fb       	bst	r25, 7
 168:	09 2e       	mov	r0, r25
 16a:	07 26       	eor	r0, r23
 16c:	0a d0       	rcall	.+20     	; 0x182 <__divmodhi4_neg1>
 16e:	77 fd       	sbrc	r23, 7
 170:	04 d0       	rcall	.+8      	; 0x17a <__divmodhi4_neg2>
 172:	0c d0       	rcall	.+24     	; 0x18c <__udivmodhi4>
 174:	06 d0       	rcall	.+12     	; 0x182 <__divmodhi4_neg1>
 176:	00 20       	and	r0, r0
 178:	1a f4       	brpl	.+6      	; 0x180 <__divmodhi4_exit>

0000017a <__divmodhi4_neg2>:
 17a:	70 95       	com	r23
 17c:	61 95       	neg	r22
 17e:	7f 4f       	sbci	r23, 0xFF	; 255

00000180 <__divmodhi4_exit>:
 180:	08 95       	ret

00000182 <__divmodhi4_neg1>:
 182:	f6 f7       	brtc	.-4      	; 0x180 <__divmodhi4_exit>
 184:	90 95       	com	r25
 186:	81 95       	neg	r24
 188:	9f 4f       	sbci	r25, 0xFF	; 255
 18a:	08 95       	ret

0000018c <__udivmodhi4>:
 18c:	aa 1b       	sub	r26, r26
 18e:	bb 1b       	sub	r27, r27
 190:	51 e1       	ldi	r21, 0x11	; 17
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <__udivmodhi4_ep>

00000194 <__udivmodhi4_loop>:
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	a6 17       	cp	r26, r22
 19a:	b7 07       	cpc	r27, r23
 19c:	10 f0       	brcs	.+4      	; 0x1a2 <__udivmodhi4_ep>
 19e:	a6 1b       	sub	r26, r22
 1a0:	b7 0b       	sbc	r27, r23

000001a2 <__udivmodhi4_ep>:
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	5a 95       	dec	r21
 1a8:	a9 f7       	brne	.-22     	; 0x194 <__udivmodhi4_loop>
 1aa:	80 95       	com	r24
 1ac:	90 95       	com	r25
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
